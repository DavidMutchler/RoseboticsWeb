unit_id,unit_title,lesson_id,lesson_title,lesson_activity,lesson_activity_name,lesson_notes,lesson_video_id,lesson_objectives
1,Table based navigation with a single Core Data entity,1,Overview and breaking the Master-Detail template,yes,Questions,https://docs.google.com/presentation/d/16GOkjkN5fEzpAzDOF-gX-nvKv9vMy-NTkGysxXcUtxQ/edit?usp=sharing,ADHPbtQdiWI,"<ul><li>The goal for this unit is to make a MovieQuotes app that uses Core Data</li><li>In addition to learning about Core Data, which will be the later videos, we'll also show you UI skills for tables, dialogs, and navigation controllers.</li><li>We'll start by looking at Apple's Master-Detail template for Core Data (then break it!)</li></ul>"
1,Table based navigation with a single Core Data entity,2,Basic UITableView,yes,Questions,https://docs.google.com/presentation/d/16GOkjkN5fEzpAzDOF-gX-nvKv9vMy-NTkGysxXcUtxQ/edit?usp=sharing,8uvoGJh1Uwg,"<ul><li>We'll create a 'Temp' view controller to connect a delegate and dataSource to a UITableView</li><li>Note that a UITableView is just a specialized view.  In this lesson we'll use a UITableView within a normal view controller.</li><li>A UITableViewController is a subclass of UIViewController that is specifically a view controller that has only a UITableView in it (NOT using that this time).</li><li>This is an awesome exercise, but notice the name says 'Temp' (what does that mean to you?)</li></ul>"
1,Table based navigation with a single Core Data entity,3,Reading MovieQuotes for table display,yes,Questions,https://docs.google.com/presentation/d/16GOkjkN5fEzpAzDOF-gX-nvKv9vMy-NTkGysxXcUtxQ/edit?usp=sharing,OAV-YVLyxPA,"<ul><li>This time we won't delete any of our work. :)  We'll start making our <b>real</b> list of MovieQuotes.</li><li>We'll worry only about the R in C<b>R</b>UD this time.  Since we don't have <b>C</b> yet the list will be hard coded.</li><li>We'll also learn about different UITableViewCell styles that are built in.</li></ul>"
1,Table based navigation with a single Core Data entity,4,Creating a MovieQuote,yes,Questions,https://docs.google.com/presentation/d/16GOkjkN5fEzpAzDOF-gX-nvKv9vMy-NTkGysxXcUtxQ/edit?usp=sharing,BjqPyUGcOGI,"<ul><li>In this lesson we'll add a button (a <b>+</b> symbol) that will launch a dialog to let us add a quote.</li><li>Dialog boxes are called UIAlertViews in iOS and, as of iOS 8, they are created with UIAlertControllers.</li><li>We'll make a UIAlertController with two text fields so we can add Movie Quotes.</li></ul>"
1,Table based navigation with a single Core Data entity,5,Empty Message when no rows are present,yes,Questions,https://docs.google.com/presentation/d/16GOkjkN5fEzpAzDOF-gX-nvKv9vMy-NTkGysxXcUtxQ/edit?usp=sharing,Ze2c1qensCg,"<ul><li>Now I'm just causing trouble. :)  I like to see a message when there are no rows present.</li><li>I think this is a nice UI feature, but it will cause a special case issue (display 1 row even if there are none) that we'll have to deal with for the rest of the app.</li></ul>"
1,Table based navigation with a single Core Data entity,6,Deleting a MovieQuote,yes,Questions,https://docs.google.com/presentation/d/16GOkjkN5fEzpAzDOF-gX-nvKv9vMy-NTkGysxXcUtxQ/edit?usp=sharing,4HaviVGAdII,"<ul><li>UITableView has a nice built-in editing feature that we'll use for deleting quotes.</li><li>As always the basics are easy and it's the details that take time.</li><li>We'll learn about the methods for canEditRowAtIndexPath and commitEditingStyle.</li></ul>"
1,Table based navigation with a single Core Data entity,7,MovieQuote Detail ViewController,yes,Questions,https://docs.google.com/presentation/d/16GOkjkN5fEzpAzDOF-gX-nvKv9vMy-NTkGysxXcUtxQ/edit?usp=sharing,6kxuBiM-9kg,"<ul><li>Time to actually make use of being in a navigation controller.  We'll make our first ever segue into another view controller!</li><li>Many of the steps in this video we've done before (constraints, connections) so we'll try to move quickly, but it still takes time.</li><li>The truly new part is the segue in the Storyboard.  There are two basic types of segues:</li><li style='margin-left: 30px;'><b>Selection segue</b> - An automatic segue that is added directly to a button or UITableViewCell that fires when the element is clicked (no code required).  We'll use a <b>Selection</b> segue here and do a little work in the prepareForSegue method, just before the selection segue fires.</li><li style='margin-left: 30px;'><b>Manual segue</b> - A segue that can be used by calling the method performSegueWithIdentifier.  It is handy when you want control over when to show the next view controller</li><li>One goof in this video!!! I forgot to change the accessory type on the MovieQuoteCell prototype to have a Disclosure Indicator, see the slides for more info (around slide 68) or see that same image on the next page.</li></ul>"
1,Table based navigation with a single Core Data entity,8,Editing a MovieQuote,yes,Questions,https://docs.google.com/presentation/d/16GOkjkN5fEzpAzDOF-gX-nvKv9vMy-NTkGysxXcUtxQ/edit?usp=sharing,6ZMa5dkmsMg,"<ul><li>Time for the U in CR<b>U</b>D, Update, which is also called edit.</li><li>We'll edit a quote from the Detail ViewController and save the changes to our array (still no Core Data yet)</li><li>Don't worry, we'll 'borrow' a lot of code to make the UI development go faster. The edit UI is similar to the create UI.</li></ul>"
1,Table based navigation with a single Core Data entity,9,Creating a MovieQuote NSManagedObject,yes,Questions,https://docs.google.com/presentation/d/16GOkjkN5fEzpAzDOF-gX-nvKv9vMy-NTkGysxXcUtxQ/edit?usp=sharing,3DPMA0AxiTY,"<ul><li>Designing a model in Core Data starts with a pretty easy to use graphical editor (it's slick)</li><li>We'll create a MovieQuote Entity that will have attributes for</li><li style='margin-left: 30px;'><b>quote</b> - A String attribute to hold the quote</li><li style='margin-left: 30px;'><b>movie</b> - A String attribute to hold the movie title</li><li style='margin-left: 30px;'><b>lastTouchDate</b> - A Date attribute, used for sorting, that we <b>initially</b> won't add at first.</li><li>We'll use the Entity model to create an NSManagedObject subclass, which is an auto-generated Class for a MovieQuote.</li></ul>"
1,Table based navigation with a single Core Data entity,10,Read and Create a MovieQuote from Core Data,yes,Questions,https://docs.google.com/presentation/d/16GOkjkN5fEzpAzDOF-gX-nvKv9vMy-NTkGysxXcUtxQ/edit?usp=sharing,kmUN7O5x45Y,"<ul><li>We'll start <b>using</b> our MovieQuote Core Data model.  We're going to tackle C and R of <b>CR</b>UD.</li><li>The high level view of the 3 steps we'll follow for dealing with Core Data are the same ones you'll see with many data transfers:</li><li style='margin-left: 30px;'><b>Prepare a command</b> - In this case we'll prepare a <b>fetchRequest</b></li><li style='margin-left: 30px;'><b>Execute that command</b> - In this case the <b>managedObjectContext</b> will execute the <b>fetchRequest</b></li><li style='margin-left: 30px;'><b>Check for errors</b> - When you are calling something that is outside your code (external dependencies) there is almost always a chance of error that you need to address.  In this app there shouldn't ever be errors, so we'll just crash the app if we get an error (yes, it's that unlikily).</li><li>After we finish with R to get an array of quotes, then we'll show you how to C with Core Data to add a quote. (should be fun)</li></ul>"
1,Table based navigation with a single Core Data entity,11,Editing and Deleting MovieQuotes from Core Data,yes,Questions,https://docs.google.com/presentation/d/16GOkjkN5fEzpAzDOF-gX-nvKv9vMy-NTkGysxXcUtxQ/edit?usp=sharing,KN-34ByCQdc,"<ul><li>We did C and R in the last video, so why not finish U and D in this video.</li><li>If you understand when things are actually saved it shows you understand the fundamentals of how Core Data works.</li><li>In this video we'll basically finished anything the user might actually notice, assuming #quotes stays < 10,000ish.</li><li>There are some inefficiencies though and <b>next time</b> we'll show you how Apple fixes the issue.</li></ul>"
1,Table based navigation with a single Core Data entity,12,Creating an NSFetchedResultsController,yes,Questions,https://docs.google.com/presentation/d/16GOkjkN5fEzpAzDOF-gX-nvKv9vMy-NTkGysxXcUtxQ/edit?usp=sharing,Y7gKzBiv8r8,"<ul><li>Apple is aware that developers will pull values from Core Data and display it in a table. So they made a special helper class.</li><li>The <b>NSFetchedResultsController</b> is designed specifically for what we are trying to do. We have a fetch and we need help figuring out how to <b>efficiently</b> get the results into a table (even if there is A LOT of data). BTW we don't have A LOT of data, but it's still good to learn. :)</li><li>In this video we'll <b>make</b> the fetched results controller and we'll use it next time.</li><li>We'll also see a very useful design pattern with a required getter property + an optional stored property backing it up.</li></ul>"
1,Table based navigation with a single Core Data entity,13,Using an NSFetchedResultsController,yes,Questions,https://docs.google.com/presentation/d/16GOkjkN5fEzpAzDOF-gX-nvKv9vMy-NTkGysxXcUtxQ/edit?usp=sharing,briLQ1EaY_E,"<ul><li>The array did two handy things for us</li><li style='margin-left: 30px;'><b>count</b> - It gave us a way to know the number of MovieQuotes</li><li style='margin-left: 30px;'><b>getting by index</b> - It gave us a way to get a MovieQuote for a given index (row)</li><li>Once we replace these two features (with a new computed property and a new method) we can start USING our fetched results controller and delete the array (this will be more efficient if there is a lot of data)</li><li>We <b>will</b> have to do some work to refresh the view, but in this video we'll just do a tableView.reloadData() and not worry about animations.</li></ul>"
1,Table based navigation with a single Core Data entity,14,Adding back the UITableViewCell animations,yes,Questions,https://docs.google.com/presentation/d/16GOkjkN5fEzpAzDOF-gX-nvKv9vMy-NTkGysxXcUtxQ/edit?usp=sharing,LqfZaNg83_M,"<ul><li>We'll just add back the code necessary to get our slide in and slide out animations</li><li>We'll still need to worry about special case :)</li><li>It's neat to see in this video how closes related the NSFetchedResultsController is to the UITableView.  They were made for each other!  The four NSFetchedResultsControllerDelegate methods match perfectly to UITableView methods (by design).</li><li>When you finish this part you are done with the app!</li></ul>"
1,Table based navigation with a single Core Data entity,15,Weatherpics Core Data Lab,yes,Questions,https://docs.google.com/presentation/d/16GOkjkN5fEzpAzDOF-gX-nvKv9vMy-NTkGysxXcUtxQ/edit?usp=sharing,rB0o1krqWdg,"<ul><li>Here is the link to the <a target='_blank' href='https://docs.google.com/document/d/1G63SjYynJhqK2L-G26YVcLkIGNlZIk1dqt6-HCavXYM/edit?usp=sharing'>WeatherpicsCoreData lab</a></li><li>Once you finish the lab submit it on Moodle (assuming you are taking this class for credit)</li></ul>"
2,Core Data Relationships in Objective-C,1,Overview and Project setup,yes,Questions,https://docs.google.com/presentation/d/1p1wTvTMnku11gYzPbVDaY5A6j8nCtN33a4HS74mWXeE/edit?usp=sharing,WVBmPwAzARI,"<ul><li>Time to do a bit more with...</li><li style='margin-left: 30px;'>Core Data by making Relationships between Entities</li><li style='margin-left: 30px;'>Presenting View Controllers modally</li><li style='margin-left: 30px;'>Android like menus via Action Sheets</li><li style='margin-left: 30px;'>and custom table view controllers</li><li>We'll do it all in Objective-C to practice your ObjC skilz!</li></ul>"
2,Core Data Relationships in Objective-C,2,List and Task Entity Models,yes,Questions,https://docs.google.com/presentation/d/1p1wTvTMnku11gYzPbVDaY5A6j8nCtN33a4HS74mWXeE/edit?usp=sharing,MDcuLPiyJBE,"<ul><li>We'll create an entity for a <b>List</b> and a <b>Task</b></li><li>Most of these steps you know, but adding the Class name is new and the Relationships are new</li><li>Once we have the data modelling done we'll update the NSFetchedResultsController to use the new List attribute.</li></ul>"
2,Core Data Relationships in Objective-C,3,Displaying List objects,yes,Questions,https://docs.google.com/presentation/d/1p1wTvTMnku11gYzPbVDaY5A6j8nCtN33a4HS74mWXeE/edit?usp=sharing,8vQNhuisGjc,"<ul><li>We want to start in on the R (Read) of C<b>R</b>UD, but we haven't done C yet (Create), so we'll have to hardcode some data</li><li>We'll show the List's title attribute on the left and the number of Tasks in the List on the right.</li><li>Keeping all those boilerplate connections from the Master-Detail template, between the NSFetchedResultsController and the UITableView, will become handy finally.</li></ul>"
2,Core Data Relationships in Objective-C,4,List Menu (Action Sheet),yes,Questions,https://docs.google.com/presentation/d/1p1wTvTMnku11gYzPbVDaY5A6j8nCtN33a4HS74mWXeE/edit?usp=sharing,kLnT2I9EULw,"<ul><li>We'll make a simple list of menu options for the List view controller</li><li style='margin-left: 30px;'>Create a new list</li><li style='margin-left: 30px;'>Delete a list</li><li style='margin-left: 30px;'>Update a list title</li><li style='margin-left: 30px;'>and Cancel</li><li>For this lesson you'll need this link to the <a target='_blank' href='https://drive.google.com/open?id=0B-KIW0IjgQ5pMmRlNklGcFlfMUU'>RoseTask Image</a></li></ul>"
2,Core Data Relationships in Objective-C,5,Create and Update Lists,yes,Questions,https://docs.google.com/presentation/d/1p1wTvTMnku11gYzPbVDaY5A6j8nCtN33a4HS74mWXeE/edit?usp=sharing,lSnAPb1sBlM,"<ul><li>We'll make a dialog (UIAlertView) to create and update List objects</li><li>We'll be sneaky and use the same method for both Create and Update.</li><li style='margin-left: 30px;'>Pass in a List to the method and it'll do an update.</li><li style='margin-left: 30px;'>Pass in nil and it'll create a new list.</li><li>After the Create or Update we'll save and resort the list of lists.</li></ul>"
2,Core Data Relationships in Objective-C,6,Starting the Tasks View Controller,yes,Questions,https://docs.google.com/presentation/d/1p1wTvTMnku11gYzPbVDaY5A6j8nCtN33a4HS74mWXeE/edit?usp=sharing,GBt0QlpqdfE,"<ul><li>We'll create a new view controller that will display the list of tasks (well we'll start it :) )</li><li>In this video we simply want to pass in a list and display the list title at the top</li><li>We'll also override the default text of the Back button</li></ul>"
2,Core Data Relationships in Objective-C,7,Displaying hardcoded Tasks,yes,Questions,https://docs.google.com/presentation/d/1p1wTvTMnku11gYzPbVDaY5A6j8nCtN33a4HS74mWXeE/edit?usp=sharing,xbL3d1x5hxY,"<ul><li>We'll display Tasks in this lesson, but admittedly in a bit of a lame way. ;)</li><li>Later the table view cells will get more exciting</li><li>Let's hardcode some TODO tasks!</li></ul>"
2,Core Data Relationships in Objective-C,8,Custom Table View Cell,yes,Questions,https://docs.google.com/presentation/d/1p1wTvTMnku11gYzPbVDaY5A6j8nCtN33a4HS74mWXeE/edit?usp=sharing,Bq5D19r1hrk,"<ul><li>Time to make a custom table cell.  Custom cells end up being sooo handy.</li><li>There are many ways to make custom Table View Cells.  I'd categorize the options as:</li><li style='margin-left: 30px;'>A custom class + connections to a Prototype cell in the Storyboard (this is our plan)</li><li style='margin-left: 30px;'>A custom class + a nib file, that we'd register to the table view in code</li><li style='margin-left: 30px;'>A custom class + programatically created views, which is 100% in code no drag and drop stuff</li><li>I find the top option is the easiest so that's what we'll do, it's just IBOutlets and IBActions like view controllers</li><li>Note all options require a custom UITableViewCell subclass</li></ul>"
2,Core Data Relationships in Objective-C,9,Star button callback,yes,Questions,https://docs.google.com/presentation/d/1p1wTvTMnku11gYzPbVDaY5A6j8nCtN33a4HS74mWXeE/edit?usp=sharing,TMu3Q9ziWjg,"<ul><li>In this lesson we'll setup a callback mechanism for the Star button click.</li><li>This callback mechanism will let use handle the Star button click within the TaskViewController instead of doing the heavy lifting within the TaskCell</li><li>Sorry the syntax for Objective-C <b>blocks</b> is a bit weird, but it will lead to much cleaner code design.</li></ul>"
2,Core Data Relationships in Objective-C,10,Starting the Task Detail View Controller,yes,Questions,https://docs.google.com/presentation/d/1p1wTvTMnku11gYzPbVDaY5A6j8nCtN33a4HS74mWXeE/edit?usp=sharing,7XLCzOw7g0E,"<ul><li>Time to start our LAST view controller for this app</li><li>Disclaimer: For the follow along parts of RoseTask we could've used a Dialog box.  Instead we're using a full on separate view controller.  We're going to this extra trouble just to make the lab easier for you. You're welcome.</li><li>In this lesson we'll just display it and add a Cancel button</li></ul>"
2,Core Data Relationships in Objective-C,11,UI for the Task Detail,yes,Questions,https://docs.google.com/presentation/d/1p1wTvTMnku11gYzPbVDaY5A6j8nCtN33a4HS74mWXeE/edit?usp=sharing,JadNoMdUhHw,"<ul><li>We'll add all of the UI widgets, constraints, and connections that we'll need for the TaskDetailViewController</li><li>After we get the basic Storyboard together we'll implement a few of the basic actions, saving the heavy lifting for later.</li></ul>"
2,Core Data Relationships in Objective-C,12,Refactoring our Code Smells issue,yes,Questions,https://docs.google.com/presentation/d/1p1wTvTMnku11gYzPbVDaY5A6j8nCtN33a4HS74mWXeE/edit?usp=sharing,inWS7XKYclk,"<ul><li><b>Code Smells</b> - Code smells are usually not bugs—they are not technically incorrect and do not currently prevent the program from functioning. Instead, they indicate weaknesses in design that may be slowing down development or increasing the risk of bugs or failures in the future.</li><li>We have a <b>saveContext</b> method in 3 places already and we are about to write that function a 4th time.</li><li>Additionally we get the <b>managedObjectContext</b> in every view controller (sometimes in different ways)</li><li>We'll clean that up and put these two common Core Data tasks into CoreDataUtils as class methods.</li></ul>"
2,Core Data Relationships in Objective-C,13,Create and Update a Task,,,https://docs.google.com/presentation/d/1p1wTvTMnku11gYzPbVDaY5A6j8nCtN33a4HS74mWXeE/edit?usp=sharing,M2IJvvxCgSU,"<ul><li>Time to complete the C and U for <b>Task C</b>R<b>U</b>D</li><li>We'll pass in the List (always) and Task (or nil) to the TaskDetailViewController</li><li>We'll populate the Task text field and starred state (if it's an edit)</li><li>We'll hide the delete button (if it's a create)</li><li>And we'll save our new / edited Task</li></ul>"
2,Core Data Relationships in Objective-C,14,Other ways to hide a keyboard,,,https://docs.google.com/presentation/d/1p1wTvTMnku11gYzPbVDaY5A6j8nCtN33a4HS74mWXeE/edit?usp=sharing,KU5pS-EkCxo,"<ul><li>We have already hidden the keybaord using the UITextFieldDelegate trick when a user hits Return.  Now we will add two more tricks for hiding the keyboard</li><li style='margin-left: 30px;'>Background clicks (away from any other widget)</li><li style='margin-left: 30px;'>A <b>Done</b> button on the textField's input accessory view</li></ul>"
2,Core Data Relationships in Objective-C,15,Deleting a Task,yes,Questions,https://docs.google.com/presentation/d/1p1wTvTMnku11gYzPbVDaY5A6j8nCtN33a4HS74mWXeE/edit?usp=sharing,G8HU06ACRts,"<ul><li>We'll allow users two ways to delete tasks</li><li style='margin-left: 30px;'>Left swipe on the TaskViewController</li><li style='margin-left: 30px;'>Delete button on the TaskDetailViewController</li></ul>"
2,Core Data Relationships in Objective-C,16,RoseTask Lab,yes,Questions,https://docs.google.com/presentation/d/1p1wTvTMnku11gYzPbVDaY5A6j8nCtN33a4HS74mWXeE/edit?usp=sharing,ZbtkDencIyE,"<ul><li>Here is the link to the <a target='_blank' href='https://docs.google.com/document/d/1-UfhRrgR5kF-g72G7pAu3cJiBEIk1kQ2IiV84h58R3k/edit?usp=sharing'>RoseTask lab</a></li><li>Once you finish the lab submit it on Moodle (assuming you are taking this class for credit)</li></ul>"

