unit_id,unit_title,lesson_id,lesson_title,lesson_activity,lesson_activity_name,lesson_notes,lesson_video_id,lesson_objectives
1,JavaScript Basics,1,Overview,yes,Questions,https://docs.google.com/presentation/d/1RewSgDBFvwxdrBfdFlVgFg0l4i2uVO74kQSkRqC9rCk/edit?usp=sharing,kotBNNGbE6Y,"<ul><li>There are a lot of great resources for learning jQuery.  Are are a few:</li><li style='margin-left: 20px;'><b>Good one with videos:</b> <a target='_blank' href='http://try.jquery.com/'>http://try.jquery.com/</a></li><li style='margin-left: 20px;'><b>Great hands on learning:</b> <a target='_blank' href='http://www.codecademy.com/en/tracks/jquery'>http://www.codecademy.com/en/tracks/jquery</a></li><li style='margin-left: 20px;'><b>Great examples:</b> <a target='_blank' href='http://www.w3schools.com/jquery/jquery_examples.asp'>http://www.w3schools.com/jquery/jquery_examples.asp</a></li><li style='margin-left: 20px;'><b>Official learn jQuery source:</b> <a target='_blank' href='http://learn.jquery.com/'>http://learn.jquery.com/</a></li><li>There is also an easy to use reference: <a target='_blank' href='http://api.jquery.com/'>http://api.jquery.com/</a></li></ul>"
1,JavaScript Basics,2,Project Setup,yes,Questions,https://docs.google.com/presentation/d/1RewSgDBFvwxdrBfdFlVgFg0l4i2uVO74kQSkRqC9rCk/edit?usp=sharing,di_wzJg6n3U,"<ul><li>Here is a link to the <a target='_blank' href='https://github.com/WebDevCourseMaterial/JavaScriptBasics'>JavaScript Basics Github repo</a></li><li>This app has the html and css code fully complete. We will add JavaScript code to...</li><li style='margin-left: 30px'>Add <b>click</b> listeners for the buttons to update the model</li><li style='margin-left: 30px'>Update the <b>no-cups</b> class on the body</li><li style='margin-left: 30px'>Updating the <b>text</b> in the message</li><li style='margin-left: 30px'>Updating the class on the image to nothing, <b>two-cups</b>, <b>three-cups</b>, <b>four-cups</b>, or <b>many-cups</b></li><li>We'll use the Chrome Dev tools to make this changes manually.  It's neat that we can manually make the changes that our JavaScript will do (good for testing)</li><li>Here is a copy of the code you need to add to get the links:</li></ul><script src='https://gist.github.com/fisherds/77065c12cfd6979215b9.js'></script></ul>"
1,JavaScript Basics,3,Enable Buttons,yes,Questions,https://docs.google.com/presentation/d/1RewSgDBFvwxdrBfdFlVgFg0l4i2uVO74kQSkRqC9rCk/edit?usp=sharing,w0EjepEh46U,"Here is the code you'll need to add to link in the JavaScript<script src='https://gist.github.com/fisherds/6f8015ea5ee30ac4355e.js'></script><ul><li>Then within coffee.js, we'll add a namespace to put all of our variables and functions into <b>rh.coffee</b></li><li>Within that namespace we'll create our model, which is just a single variable called <b>rh.coffee.cups</b></li><li>We'll create an <b>rh.coffee.enableButtons</b> function where we'll add three click listeners that modify the model.</li></ul>"
1,JavaScript Basics,4,Update View,yes,Questions,https://docs.google.com/presentation/d/1RewSgDBFvwxdrBfdFlVgFg0l4i2uVO74kQSkRqC9rCk/edit?usp=sharing,0Y77EKPu5Ng,"<ul><li>Our updateView function will need to...</li><li style='margin-left: 30px'>Update the <b>no-cups</b> class on the body</li><li style='margin-left: 30px'>Updating the <b>text</b> in the message</li><li style='margin-left: 30px'>Updating the class on the image to nothing, <b>two-cups</b>, <b>three-cups</b>, <b>four-cups</b>, or <b>many-cups</b></li></ul>"
1,JavaScript Basics,5,Color Converter Lab,yes,Questions,https://docs.google.com/presentation/d/1RewSgDBFvwxdrBfdFlVgFg0l4i2uVO74kQSkRqC9rCk/edit?usp=sharing,VeJGqIddz_g,"<ul><li>The lab for this unit will be a bit more complex than the Coffee Counter example and will hopefully challenge you.</li><li>We'll add the keyup event, start using the .css() function, and have you do some math. ;)</li><li>Here is the link to the <a target='_blank' href='https://docs.google.com/document/d/1T1fEi37lGe-t_7Vw6PzPjT4pLA63FiyUR6Z_iULRaY0/edit?usp=sharing'>Color Converter Lab</a></li></ul>"
2,JavaScript Objects,1,Making a Constructor,yes,Questions,https://docs.google.com/presentation/d/1-RJPpvAewlxVBwnryudlJ5JedIwSBcHraVzMpi5poMY/edit?usp=sharing,QQGEOHKweLc,"<ul><li>Technically JavaScript doesn't have classes (formally it is a prototype-based language not a class-based language), but you can make objects so most people do refer to constructor functions as classes.</li><li>The real magic of creating an object relies on the keyword <b>new</b> and the <a target='_blank' href='https://wildlyinaccurate.com/understanding-javascript-inheritance-and-the-prototype-chain'>prototype chain</a>.</li><li>In this video we'll make a constructor and an instance of that constructor.  Here is the link to the <a target='_blank' href=''>starting code</a> and here are the additions to main.py for this unit:</li></ul><script src='https://gist.github.com/fisherds/281cde58dde82cc148bd.js'></script>"
2,JavaScript Objects,2,Methods,yes,Questions,https://docs.google.com/presentation/d/1-RJPpvAewlxVBwnryudlJ5JedIwSBcHraVzMpi5poMY/edit?usp=sharing,u3HL3i_6Xro,"<ul><li>We'll add three methods to our BankAccount prototype: toString, deposit, and withdraw</li><li>These three methods will go onto the rh.objectbasics.BankAccount<b>.prototype</b> object.</li><li>AFTER you get it all working like the video shows you should try doing a refactor to use the new class syntax as discussed in the <a target='_blank' href='https://docs.google.com/presentation/d/1-RJPpvAewlxVBwnryudlJ5JedIwSBcHraVzMpi5poMY/edit#slide=id.g181a0545f5_0_0'>slides</a></li><li>It's a cleaner way to type the same code.  You'll like it.  You can also use that new syntax for the Baby class challenge.</li></ul>"
2,JavaScript Objects,3,Baby Class Exercise,yes,Questions,https://docs.google.com/presentation/d/1-RJPpvAewlxVBwnryudlJ5JedIwSBcHraVzMpi5poMY/edit?usp=sharing,eRaugi45oXw,"<ul><li>First we'll walk through the interestRate solution, then time for you to get some practice!</li><li>Here is a link to the <a target='_blank' href='https://docs.google.com/document/d/1fd1rwbRhMZ7q2AKAQ6D4GU5K2k4cwLvY_QePI3NRxJM/edit?usp=sharing'>Baby Class Exercise</a></li></ul>"
2,JavaScript Objects,4,Dice Without Friends Overview,yes,Questions,https://docs.google.com/presentation/d/1-RJPpvAewlxVBwnryudlJ5JedIwSBcHraVzMpi5poMY/edit?usp=sharing,q6sW8U5ulnI,"<ul><li>Open the <b>JavaScriptObjects/DiceWithoutFriends/Solution/play.html</b> file to look at the finished product.</li><li>This project uses jQuery and Bootstrap, a fairly simple HTML file, and only a small amount of custom CSS.</li><li>The interesting part is the game implementation in JavaScript.</li><li>There is a file that serves the role of the main function (<b>dwf_play_main.js</b>) then 4 classes:</li><li style='margin-left: 20px;'><b>Die.js</b> Model object to hold the state, location, and value of a single die.</li><li style='margin-left: 20px;'><b>DiceRound.js</b> Model object to manage a single round of the Dice Game (does not care about views).</li><li style='margin-left: 20px;'><b>DiceRoundController.js</b> Informs the DiceRound model object of clicks, then updates the view based on the new state.</li><li style='margin-left: 20px;'><b>DiceGameController.js</b> Cheater class that is a controller with model variables in there too.  Manages the total score, current round, and Fastest Finish feature.</li></ul>"
2,JavaScript Objects,5,Our DWF Starting Point,yes,Questions,https://docs.google.com/presentation/d/1-RJPpvAewlxVBwnryudlJ5JedIwSBcHraVzMpi5poMY/edit?usp=sharing,Y8_3JPuTIU8,"<ul><li>Time to start looking at the Dice Without Friends starting point.  We'll complete <b>play.html</b> and <b>dwf_play_main.js</b> in this video.</li><li>Here are the script links you need to add to the html file to bring in the JavaScript.</li></ul><script src='https://gist.github.com/fisherds/bd9154aac93ccd908823.js'></script>"
2,JavaScript Objects,6,This is not this anymore,yes,Questions,https://docs.google.com/presentation/d/1-RJPpvAewlxVBwnryudlJ5JedIwSBcHraVzMpi5poMY/edit?usp=sharing,VS8kc9H2oys,"<ul><li>There are many times in JavaScript development with objects that the value of <b>this</b> is not what you'd expect.</li><li>It happen whenever you are within a callback function. <b>this</b> will not be the instance of the class.</li><li>There are a few ways to fix <b>this</b> issue, some fancy, some simple.  The simple way works fine, so that's what we'll show you.</li><li>We'll learn about <b>this</b> technique while we fix our <b>Roll Again</b> and <b>Stop</b> buttons.</li><li>After you follow the video exactly you should try the new better solution to the issue.  There is now a much cleaner solution available via the fat arrow function.  See info in the <a target='_blank' href='https://docs.google.com/presentation/d/1-RJPpvAewlxVBwnryudlJ5JedIwSBcHraVzMpi5poMY/edit#slide=id.g1857fe4b1c_0_15'>slides</a></li></ul>"
2,JavaScript Objects,7,DWF DiceGameController,yes,Questions,https://docs.google.com/presentation/d/1-RJPpvAewlxVBwnryudlJ5JedIwSBcHraVzMpi5poMY/edit?usp=sharing,nf7HGYu7WaY,"<ul><li>We'll implement the DiceGameController so that we can have a total score and round number.</li><li>We'll play with <b>this</b> some more and learn about passing/receiving functions as parameters.</li></ul>"
2,JavaScript Objects,8,localStorage,yes,Questions,https://docs.google.com/presentation/d/1-RJPpvAewlxVBwnryudlJ5JedIwSBcHraVzMpi5poMY/edit?usp=sharing,SMv8PEoW6BE,"<ul><li>There are a few mechanism for client side data storage (<a target='_blank' href='http://www.html5rocks.com/en/tutorials/offline/storage/'>fun link</a>), but by far the easiest option is key-value storage via sessionStorage and localStorage, which is called <a target='_blank' href='http://en.wikipedia.org/wiki/Web_storage'>Web Storage</a>.</li><li>Both are 'basically' JavaScript objects that you can add items to which persist in the browser across page reloads.</li><li style='margin-left: 30px;'><b>sessionStorage</b> - key-value storage that lasts for the duration of the browser session</li><li style='margin-left: 30px;'><b>localStorage</b> -  key-value storage that lasts BEYOND the duration of the browser session</li><li>We'll use localStorage to implement our Fastest Finish feature (and it couldn't be easier)</li></ul>"
2,JavaScript Objects,9,Lights Out JavaScript Lab,yes,Questions,https://docs.google.com/presentation/d/1-RJPpvAewlxVBwnryudlJ5JedIwSBcHraVzMpi5poMY/edit?usp=sharing,G1gT4qdINw0,"<ul><li>There is the link to the <a target='_blank' href='https://docs.google.com/document/d/1UmkY7KVOgTC6gJPbvQoWLOOtchgI0Z8J2kTBPef0fU0/edit?usp=sharing'>Lights Out (JavaScript) Lab</a></li></ul>"
3,Simple AJAX Requests,1,Overview,yes,Questions,https://docs.google.com/presentation/d/1O0HsnnFfCSNA-6duT8PkFTKmclje52Ey2PK6cuBj3sU/edit?usp=sharing,sC5ft3Z8dTU,"<ul><li>Really jQuery does all their AJAX work with the <a target='_blank' href='http://api.jquery.com/jquery.ajax/'>.ajax() function</a></li><li>For our GET requests we will use the .ajax() convenience method called <a target='_blank' href='http://api.jquery.com/jquery.getjson/'>getJSON</a></li><li style='margin-left: 30px; list-style-type: none;'><i>which under the hood calls .ajax() setting the type to <b>GET</b> (the default) and dataType to <b>json</b></i></li><li>Once the request completes we'll use the <a target='_blank' href='http://api.jquery.com/deferred.done/'>.done() method</a> to handle success, and <a target='_blank' href='http://api.jquery.com/deferred.fail/'>.fail() method</a> to handle failures.</li></ul><script src='https://gist.github.com/fisherds/05eeab1396a8679510d6.js'></script>"
3,Simple AJAX Requests,2,Client GET,yes,Questions,https://docs.google.com/presentation/d/1O0HsnnFfCSNA-6duT8PkFTKmclje52Ey2PK6cuBj3sU/edit?usp=sharing,XGQBEVZJyDA,"<ul><li>We'll start our Server Time demo.  Here is the <a target='_blank' href='https://github.com/WebDevCourseMaterial/SimpleAjax'>Github repo link</a>.</li><li>We'll create a getJSON request based on our skeleton code to <b>get</b> the time from the server.</li></ul><script src='https://gist.github.com/fisherds/05eeab1396a8679510d6.js'></script>Here are the links you'll need for main.py... (note, the OLD lab was Matching Weatherpics, the NEW lab is Tic-Tac-Toe)<br>If you look really closely at the video you will see the words Matching Weatherpics, ignore that an uses these links...<script src='https://gist.github.com/fisherds/acc72ac1e09435c46545.js'></script>"
3,Simple AJAX Requests,3,Server GET,yes,Questions,https://docs.google.com/presentation/d/1O0HsnnFfCSNA-6duT8PkFTKmclje52Ey2PK6cuBj3sU/edit?usp=sharing,qQfIlTdOXTM,"<ul><li>We'll write the <b>backend</b> code to receive our GET request.  This part will be a bit harder than the client code.</li><li>We'll add a handler called <b>ServerTime</b> to a new file called <b>simple_ajax.py</b> to handle requests made to the <b>/servertime</b> path.</li><li>You will need to add a routing tuple to main.py to send the /servertime requests to that handler.</li><li>Our handlers that return JSON data will be of this format:</li></ul><script src='https://gist.github.com/fisherds/ef5c59ffd31237fb9d07.js'></script>"
3,Simple AJAX Requests,4,Client POST,yes,Questions,https://docs.google.com/presentation/d/1O0HsnnFfCSNA-6duT8PkFTKmclje52Ey2PK6cuBj3sU/edit?usp=sharing,4qN-uenx2kA,"<ul><li>Time to make a client side POST request.  We'll use <b>.post()</b> (which is a convenience function for <b>.ajax()</b>)</li><li><b>.post()</b> is similar to <b>.getJSON()</b> in that you pass in a URL + parameters then wait for the <b>.done()</b> or <b>.fail()</b> function to be called.</li><li>In general a GET may or may not have parameters, but a POST pretty much <b>always</b> has parameters.</li><li>There is the skeleton code for a typical jQuery POST request with a JSON reply.</li></ul><script src='https://gist.github.com/fisherds/a8d438d30cc9e3cf3489.js'></script>"
3,Simple AJAX Requests,5,Server POST,yes,Questions,https://docs.google.com/presentation/d/1O0HsnnFfCSNA-6duT8PkFTKmclje52Ey2PK6cuBj3sU/edit?usp=sharing,qYopwo62HeQ,"<ul><li>Time to add a POST handler to our backend.</li><li>We will start by making a functional reply that does not change the state of the world (which isn't really a 'post')</li><li>Then we'll add a DataStore class and save the value (now that's a <b>post</b>)</li><li>Then we'll prove the value is saved by getting that value in the GET request as well.</li></ul>"
3,Simple AJAX Requests,6,MovieQuotes Quiz Intro,yes,Questions,https://docs.google.com/presentation/d/1O0HsnnFfCSNA-6duT8PkFTKmclje52Ey2PK6cuBj3sU/edit?usp=sharing,qIFlYcApRH4,"<ul><li>Here is the link to the <a target='_blank' href='http://fisherds-movie-quotes.appspot.com/quiz.html'>page used in the demo</a> (might not be up as it changes over time, but you can try)</li><li>MovieQuotes quiz will use an AJAX GET to fetch the questions and an AJAX POST to add quotes.</li><li>Additionally (perhaps even more importantly) this demo will also continue to show new skills useful in web apps.</li><li>Here is the link to <a target='_blank' href='https://github.com/WebDevCourseMaterial/SimpleAjaxApplications'>the Github repo</a> for the starter code.</li><li>Note, if you listen really carefully you will hear that the plan for the lab is Weatherpics Matching, the new lab is Tic-Tac-Toe instead.</li></ul>"
3,Simple AJAX Requests,7,Task Queues,yes,Questions,https://docs.google.com/presentation/d/1O0HsnnFfCSNA-6duT8PkFTKmclje52Ey2PK6cuBj3sU/edit?usp=sharing,5D_cXm7TQw8,"<ul><li>Task Queues are Google's way of letting you run longer jobs with AppEngine.</li><li>Due to the builtin deferred library it's really easy to use Task Queues (LOVE IT when things are easy).</li><li>We'll use deferred.defer to run our function on a different queue (thread).</li><li>We'll use a Task Queue to add quotes to the Datastore in small chunks, but there are many uses of Task Queues.</li><li>To follow best practice we will use small chunks (tasks) with our Task Queue.</li><li>This adding of data job isn't 'really' that big, but it's nice to learn how to do things right.</li></ul>"
3,Simple AJAX Requests,8,Backend request handlers,yes,Questions,https://docs.google.com/presentation/d/1O0HsnnFfCSNA-6duT8PkFTKmclje52Ey2PK6cuBj3sU/edit?usp=sharing,FqYUXnLVBQ0,"<ul><li>We'll write a backend POST handler to add MovieQuotes via AJAX reusing the <b>/insertquote</b> path</li><li>We'll also write a GET handler to get quiz questions.</li><li>When getting quiz questions the client will request a number of questions using an input parameter.</li><li>Then we'll test both methods (in hacky ways) to make sure they work.</li></ul>"
3,Simple AJAX Requests,9,Client side POST to add a quote,yes,Questions,https://docs.google.com/presentation/d/1O0HsnnFfCSNA-6duT8PkFTKmclje52Ey2PK6cuBj3sU/edit?usp=sharing,DRs7O-B8f1o,"<ul><li>Time to start writing client side jQuery AJAX requests.</li><li>We'll also make the /quiz.html URL server the /static/moviequotes_quiz.html page with a change to app.yaml</li><li>Then we'll add a POST request to the MovieQuotesQuizController.</li><li>Here is the skeleton jQuery post code snippet (you will need to update the path to /insertquote instead of /servertime)</li></ul><script src='https://gist.github.com/fisherds/a8d438d30cc9e3cf3489.js'></script>"
3,Simple AJAX Requests,10,GET quiz questions,yes,Questions,https://docs.google.com/presentation/d/1O0HsnnFfCSNA-6duT8PkFTKmclje52Ey2PK6cuBj3sU/edit?usp=sharing,968BX_8zunU,"<ul><li>Time to add client side jQuery to get the quiz question data</li><li>As a heads up we'll end this video with syntax errors in our code that we'll fix next time.</li><li>Here is the skeleton jQuery getJSON call (note, you need to add dataToSend AND change the path so you might be a few characters faster if you just copy the .post from your existing code, your choice).</li></ul><script src='https://gist.github.com/fisherds/05eeab1396a8679510d6.js'></script>"
3,Simple AJAX Requests,11,Creating HTML from JavaScript,yes,Questions,https://docs.google.com/presentation/d/1O0HsnnFfCSNA-6duT8PkFTKmclje52Ey2PK6cuBj3sU/edit?usp=sharing,-utVMok5ah4,"<ul><li>We'll demostrate two ways to create an HTML element with jQuery</li><li style='margin-left: 30px;'><b>$(html)</b> - Calling the jQuery constructor with HTML code actually creates that element (<a target='_blank' href='http://api.jquery.com/jQuery/#jQuery2'>documentation link</a>)</li><li style='margin-left: 30px;'><b>.clone</b> - Copying an element from the page and making another one (<a target='_blank' href='http://api.jquery.com/clone/'>documentation link</a>)</li><li style='margin-left: 30px;'>For our clone here we'll copy a .hidden element then remove the .hidden class on the clone</li><li>In both cases you still need to attach the element to the DOM in order to make it visible. Some ways to attach:</li><li><a target='_blank' href='http://api.jquery.com/append/'>.append()</a> <a target='_blank' href='http://api.jquery.com/prepend/'>.prepend()</a> <a target='_blank' href='http://api.jquery.com/appendTo/'>.appendTo()</a> <a target='_blank' href='http://api.jquery.com/prependTo/'>.prependTo()</a> <a target='_blank' href='http://api.jquery.com/html/'>.html()</a> <a target='_blank' href='http://api.jquery.com/after/'>.after()</a> <a target='_blank' href='http://api.jquery.com/before/'>.before()</a> <a target='_blank' href='http://api.jquery.com/insertAfter/'>.insertAfter()</a> <a target='_blank' href='http://api.jquery.com/insertBefore/'>.insertBefore()</a> <a target='_blank' href='http://api.jquery.com/wrap/'>.wrap()</a> etc.</li><li>After you finish and deploy you can <a target='_blank' href='https://docs.google.com/forms/d/1BiLZYFRX8wyTa4ybr7hn0eQ5hkFAoLJonw7gmOSvbMQ/viewform'>submit your link here</a></li></ul>"
3,Simple AJAX Requests,12,Tic-Tac-Toe Lab,yes,Questions,https://docs.google.com/presentation/d/1O0HsnnFfCSNA-6duT8PkFTKmclje52Ey2PK6cuBj3sU/edit?usp=sharing,FJxWOsDdexY,"<ul><li>We'll be making a Tic-Tac-Toe game that uses both Jinja2 and AJAX.</li><li>There is the link to the <a target='_blank' href='https://docs.google.com/document/d/14hH9ry0iSRMDL0fK2WdwurP0VMaSTQSC04tBworLb2U/edit?usp=sharing'>lab document</a> so you can get started.</li></ul>"

