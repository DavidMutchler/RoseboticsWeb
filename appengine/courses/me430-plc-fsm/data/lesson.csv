unit_id,unit_title,lesson_id,lesson_title,lesson_activity,lesson_activity_name,lesson_notes,lesson_video_id,lesson_objectives
1,Introduction to PLCs and Ladder Logic,1,Introduction to PLCs,yes,Introduction to PLC Questions,https://docs.google.com/presentation/d/1syomU5CeCu-3K-XzJzurQmo_V-J73Z1j4eYZ2rbNm-E/edit?usp=sharing,MiPnOBj88ys,"<ul><li>PLCs are used for software control so that sensor inputs + control code can be used to drive outputs (similar to a PIC)</li><li>PLCs are used primarily to drive assembly lines all over the world</li><li>PLCs (in general) are simpler, more focused devices that do big power jobs using a graphical programming language.</li></ul>"
1,Introduction to PLCs and Ladder Logic,2,Installing PicoSoft,,,https://docs.google.com/presentation/d/1syomU5CeCu-3K-XzJzurQmo_V-J73Z1j4eYZ2rbNm-E/edit?usp=sharing,WRDVPKYb4OU,"<ul><li style='font-size: 18px;'>Here are the <a target='_blank' href='https://docs.google.com/document/d/1x_W956oo7l-BEWK6sDQBue8E0xnyvND4S6O085ueM5c/edit?usp=sharing'>new instuctions for installing Picosoft v6.2</a></li><li>Regretfully the download process has more steps now. The video only shows the <b>last</b> step, the link above shows <b>all</b> the steps.</li></ul>"
1,Introduction to PLCs and Ladder Logic,3,PicoSoft Overview,yes,PicoSoft Overview Questions,https://docs.google.com/presentation/d/1syomU5CeCu-3K-XzJzurQmo_V-J73Z1j4eYZ2rbNm-E/edit?usp=sharing,Ly1EoMaQueo,"<ul><li>There are four tabs in PicoSoft<ul><li><b>Project</b> - Where you pick your PLC type</li><li><b>Circuit Diagram</b> - Where you write your Ladder Logic</li><li><b>Simulation</b> - Where you test your program</li><li><b>Communication</b> - Where you download your ladder logic to a real device (lab only)</li></ul></li></ul>"
1,Introduction to PLCs and Ladder Logic,4,Inputs to PLCs,yes,Inputs to PLCs Questions,https://docs.google.com/presentation/d/1syomU5CeCu-3K-XzJzurQmo_V-J73Z1j4eYZ2rbNm-E/edit?usp=sharing,2CmE0v-MxLc,"<ul><li>Switch Type (NO or NC) + Stimulus State (present or not present) = State (Made or Broken)</li><li><b>Made = conducts electricity =</b><ul><li>A Normally <b>Open</b> switch that is <b>pressed</b> (stimulus present)</li><li>A Normally <b>Closed</b> switch that is <b>unpressed</b> (no stimulus present)</li></ul></li><li><b>Broken = Does not conduct electricity = </b><ul><li>A Normally <b>Open</b> switch that is <b>unpressed</b> (no stimulus present)</li><li>A Normally <b>Closed</b> switch that is <b>pressed</b> (stimulus present)</li></ul></li></ul>"
1,Introduction to PLCs and Ladder Logic,5,Logic Circuits with Ladder Logic,yes,Logic Circuits with Ladder Logic Questions,https://docs.google.com/presentation/d/1syomU5CeCu-3K-XzJzurQmo_V-J73Z1j4eYZ2rbNm-E/edit?usp=sharing,VhEGuf6Jdd0,"<ul><li><b>AND</b> and <b>OR</b> are easy to make and understand with Ladder Logic</li><li><b>NOT</b> is done by making the input gate a <b>Break</b><ul><li><b>Make</b> gates allow current to flow through the rung when the switch is <b>Made</b></li><li><b>Break</b> gates allow current to flow through the rung when the switch is <b>Broken</b></li></ul></li><li>A Normally Open switch being used with a Make gate is the easiest combo.  All others require thought. :)</li></ul>"
1,Introduction to PLCs and Ladder Logic,6,Ladder Logic Practice,,,https://docs.google.com/presentation/d/1syomU5CeCu-3K-XzJzurQmo_V-J73Z1j4eYZ2rbNm-E/edit?usp=sharing,sk2T3tp9_C4,"<ul><li>Make gates allow current to pass when the input is Made</li><li>Break gates allow current to pass when the input is Broken</li><li>Question #1 is straight forward because the problem statement tells you the state (Broken)</li><li>Questions #2 and #3 are more complex because the problem statement gives you a stimulus state, which requires you to think about the switch type (N.O. or N.C.)</li></ul>"
2,PicoSoft Markers Timers and Counters,1,Markers,yes,Marker Questions,https://docs.google.com/presentation/d/1-fmLUyWiMU3unJMVyWy1gXeanYU7fbtNvXtgyNbY30U/edit?usp=sharing,eXMmkHWWjRk,"<ul><li>Markers are one bit variables that let you keep track of the current state.</li><li>Markers and Outputs have four types<ul><li><b>Contactor</b> - Turns the marker <b>on/off</b> to match the rung state.<br>- Continuously sets the marker to match the rung state.</li><li><b>Set</b> - Turns the marker <b>on</b> when the rung is active.<br>- No impact on the marker when the rung is not active.</li><li><b>Reset</b> - Turns the marker <b>off</b> when the rung is active.<br>- No impact on the marker when the rung is not active.</li><li><b>Impulse Relay</b> - <b>Toggles</b> the state of the marker at the moment the rung becomes active.<br>- Only affects the marker at the moment the rung goes active.</li></ul></li></ul>"
2,PicoSoft Markers Timers and Counters,2,Timers,yes,Timer Questions,https://docs.google.com/presentation/d/1-fmLUyWiMU3unJMVyWy1gXeanYU7fbtNvXtgyNbY30U/edit?usp=sharing,xHfoYMhn094,"<ul><li>Timers are similar to a Marker Contactors, but there is a time difference between when the controlling rung is active and the Timer is Made.</li><li>There are two types of Timers<ul><li><b>On-Delay Timers</b> - Timers that don't come on right away.</li><li><b>Off-Delay Timers</b> - Timers that stay on for extra 'bonus time'.</li></ul></li><li><b>On-Delay</b> Timers are useful when you are in a state and want to take an action at the end of a time interval.</li><li><b>Off-Delay</b> Timers are useful if you simply want to keep something on for a bit longer (bonus time).</li></ul>"
2,PicoSoft Markers Timers and Counters,3,Counters,yes,Counter Questions,https://docs.google.com/presentation/d/1-fmLUyWiMU3unJMVyWy1gXeanYU7fbtNvXtgyNbY30U/edit?usp=sharing,zCmbHcs8i_g,"<ul><li>Counters increment their count at the moment their controlling rung becomes active.</li><li>When a counter reaches the setpoint (or more) it becomes Made.</li><li>A <b>Counter Reset</b> relay resets the count to 0.</li><li>A <b>Counter Direction</b> relay lets you change from counting up to counting down.</li><li>Overall Counters are pretty easy to use and understand.  You'll like them.</li></ul>"
2,PicoSoft Markers Timers and Counters,4,PicoSoft Practice,,,https://docs.google.com/presentation/d/1-fmLUyWiMU3unJMVyWy1gXeanYU7fbtNvXtgyNbY30U/edit?usp=sharing,MpjUibFobrY,"<ul><li>There are always multiple ways to solve a problem</li><li>We'll solve this one using Off-Delay Timers which works out to be pretty straight forward.</li></ul>"
3,Finite State Machines for PLCs,1,Introduction to Finite State Machines,yes,FSM Questions,https://docs.google.com/presentation/d/1r1M2tQJXd9lCXBlnG5U9txoZwxIptifyh-stuawvro0/edit?usp=sharing,6abt3Ewkbec,"<ul><li>Finite State Machines (FSMs) are a planning tool before you write your code.</li><li>A FSM can be very helpful for PLC or PIC programs (seems to fit better for PLCs, but also handy for some microcontroller projects)</li><li>You need to be able to <b>understand</b> a FSM.</li><li>You also need to be able to <b>create</b> your own FSMs.</li></ul>"
3,Finite State Machines for PLCs,2,Implementing FSMs in PicoSoft,yes,Implementing FSM Questions,https://docs.google.com/presentation/d/1r1M2tQJXd9lCXBlnG5U9txoZwxIptifyh-stuawvro0/edit?usp=sharing,mlwXF5VO5p4,"<ul><li>Implementing a FSM means you convert every state, every transition, and every action into code. (you build your plan)</li><li>Usually you have a paper copy of your FSM next to you as you code and you check off transitions and actions as you implement them.</li><li>Markers work well to track the state with Sets and Resets.</li><li>Outputs (the Q's) work well as contactors based on the Marker state.</li></ul>"
3,Finite State Machines for PLCs,3,Practice Implementing FSMs,yes,Bionic Commando Questions,https://docs.google.com/presentation/d/1r1M2tQJXd9lCXBlnG5U9txoZwxIptifyh-stuawvro0/edit?usp=sharing,Xi6tqqe2Iyk,"<ul><li>There is nothing special about Bionic Commando, I just like silly examples and it was the first thing I thought of. :)  It could be any FSM for practice.</li><li>Make sure you follow along because you will be asked to demo this program for the in-class quiz to your instructor.</li></ul>"
3,Finite State Machines for PLCs,4,Mealy Machines,yes,Mealy Machine Questions,https://docs.google.com/presentation/d/1r1M2tQJXd9lCXBlnG5U9txoZwxIptifyh-stuawvro0/edit?usp=sharing,JkosRp7HgGM,"<ul><li><b>Moore machine</b> - Outputs are based on state only (everything we've done so far was a Moore machine)</li><li><b>Mealy machine</b> - Outputs are based on the <b>state and the current inputs</b></li><li>All my FSMs start as Moore Machines, but then as soon as an output depends on an input it just becomes a Mealy machine instead.  In short, the vocabulary terms are good to know, but not really that important.</li></ul>"
4,Finite State Machines for PICs,1,Implementing a FSM on a PIC,yes,PIC FSM Questions,https://docs.google.com/presentation/d/1moLt0jpzETeaVZI667QJW4cY8uGPv7Lf8qc302SaWDM/edit?usp=sharing,qwHD95JgGV4,"<ul><li>Implementing a FSM on a PIC requires you to make a variable to track the current <b>state</b>.</li><li>Make a <b>#define</b> for each <b>state</b> with a unique integer value.</li><li>Then set the state to the appropriate #define. For example: <b>state = STATE_READY;</b></li></ul>"
4,Finite State Machines for PICs,2,Making the 430 FSM,,,https://docs.google.com/presentation/d/1moLt0jpzETeaVZI667QJW4cY8uGPv7Lf8qc302SaWDM/edit?usp=sharing,8MomYCo2DjM,"<ul><li>The correct combo is <b>Clear</b>, then <b>4</b> -> <b>3</b> -> <b>0</b> then <b>Enter</b></li><li>The 'Red' Failure light will only come on when in the <b>Failure</b> state AND <b>Enter</b> is being pressed.</li><li>The 'Green' Success light will be on all the time while in the <b>Success</b> state.</li></ul>"
4,Finite State Machines for PICs,3,PLC Implementation of the 430 Lock,,,https://docs.google.com/presentation/d/1moLt0jpzETeaVZI667QJW4cY8uGPv7Lf8qc302SaWDM/edit?usp=sharing,JXXUg2unQ6M,"<ul><li style='font-size: 18px;'>Right click on this link and select Save link as... <a href='http://www.rose-hulman.edu/class/me/HTML/ME430_Material_2_0/Public/Code/VideoLectureCode/ME430Lock.e60'>ME430Lock.e60</a></li><li>Implement all of the remaining transition arrows and all of the state actions (outputs).</li></ul>"
4,Finite State Machines for PICs,4,PIC Implementation of the 430 Lock,,,https://docs.google.com/presentation/d/1moLt0jpzETeaVZI667QJW4cY8uGPv7Lf8qc302SaWDM/edit?usp=sharing,-M-MmXlDc00,"<ul><li style='font-size: 18px;'>Right click on this link and select Save link as... <a href='http://www.rose-hulman.edu/class/me/HTML/ME430_Material_2_0/Public/Code/VideoLectureCode/ME430Lock.c'>ME430Lock.c</a></li><li>Implement all of the remaining transition arrows</li></ul>"




