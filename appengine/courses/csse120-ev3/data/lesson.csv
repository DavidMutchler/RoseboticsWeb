unit_id,unit_title,lesson_id,lesson_title,lesson_activity,lesson_activity_name,lesson_notes,lesson_video_id,lesson_objectives
1,Drive Motors,1,Introduction to this unit,yes,Questions,https://github.com/Rosebotics/ev3dev-curriculum,-8gce3R701k,"<ul><li>In this video we'll show an example of the mini-project that we'll build for this unit called <b>m5_drive_polygon</b></li><li>We'll also show a potentially useful debugging trick if your robot runs away after a code crash.</li></ul>"
1,Drive Motors,2,ev3.Motor API,yes,Questions,https://github.com/Rosebotics/ev3dev-curriculum,j0-ATIe6pqg,"<ul><li>During this video you should have the <a target='_blank' href='https://docs.google.com/document/d/1vGc-O2wMRQNLbN8IyN05TaWJPiuUNm2e3XbCtTNpxV8/edit?usp=sharing'>Drive Motors One Page Summary</a> on a sheet of paper in front of you.  If you received one already, get it out.  If you did not receive one, print it out before starting the video.</li><li>In addition to that handout your should also visit and bookmark the <a target='_blank' href='http://python-ev3dev.readthedocs.io/en/stable/'>official python-ev3dev API</a> (the important links are at the bottom of that page)</li><li>Drive motors use the <b>ev3.Motor</b> class.  This class, like all classes, has instance variables and methods.</li><li style='margin-left: 30px;'><b>Instance variables</b> - position_sp, speed_sp, stop_action, and time_sp</li><li style='margin-left: 30px;'><b>Methods</b> - run_forever(), stop(), run_to_rel_pos(), run_to_abs_pos(), run_timed(), and wait_while()</li></ul>"
1,Drive Motors,3,Modules summary,yes,Questions,https://github.com/Rosebotics/ev3dev-curriculum,UW5tH9fWc74,"<ul><li>The robot modules will build up to <b>m5_drive_polygon.py</b>, teaching you to use the ev3.Motor API along the way.</li><li>You will make library functions to encapsulate your work and you'll be doing some calculations to convert wheel degrees into linear inches.</li></ul>"
1,Drive Motors,4,Wait until Event pattern,yes,Questions,https://github.com/Rosebotics/ev3dev-curriculum,VDjCvOqZ5iY,"<ul><li>In the Drive Motors unit you will regularly be asking the user for input and then ending the program if the user enters 0 for the speed or time.  This is called the wait-until-event pattern as discussed in this video.</li><li>In addition to watching this video make a <b>fork</b> of the <a target='_blank' href='https://github.com/CSSE120StartingCode/WaitUntilEvent'>Wait Until Event project from here</a> and set up a PyCharm project</li><li>Work at least <b>m2_console_input.py</b> in that project and look at a few examples.  We recommend you work all the modules for practice, but only require m2.</li><li>Note, we will NOT be working those modules in class, they are super short and they should be worked now.  It's a mini-project that is just for this one video.  Your REAL project will be the Drive Motor folder of your team robot project repository.</li></ul>"
2,Digital Inputs,1,Introduction,yes,Questions,https://github.com/Rosebotics/ev3dev-curriculum,N7DPg60Pygg,"<ul><li>In this video we'll show an example of the mini-project that we'll build for this unit called <b>m6_ir_remote.py</b></li><li>We'll also show a potentially useful trick for stopping a program from the SSH Terminal using Ctrl C.</li></ul>"
2,Digital Inputs,2,Digital Input API,yes,Questions,https://github.com/Rosebotics/ev3dev-curriculum,J-U1D7eFtNA,"<ul><li>During this video you should have the <a target='_blank' href='https://docs.google.com/document/d/1XLh8cXaCLF6w5xFxfuSe06Uwz-3FmGhIB7RlMSx3oIs/edit?usp=sharing'>Digital Inputs One Page Summary</a> on a sheet of paper in front of you.  If you received one already, get it out.  If you did not receive one, print it out before starting the video.</li><li>There are three types of digital inputs that we'll use:</li><li style='margin-left: 30px;'><b>ev3.Button</b> - The six front buttons on EV3. We'll use these with events.</li><li style='margin-left: 30px;'><b>ev3.TouchSensor</b> - The plus shaped button that the arm hits. We'll use this input as a state.</li><li style='margin-left: 30px;'><b>ev3.RemoteControl</b> - IR remote control that has 4 channels. We'll use it with events as well.</li></ul><div style='text-align:center'><img src='assets/img/digital_inputs_uml.png' alt='LCD code'></div>"
2,Digital Inputs,3,LEDs Sound the Screen and the Arm,yes,Questions,https://github.com/Rosebotics/ev3dev-curriculum,GSfqyag2mzg,"<ul><li>In this video we'll talk about 'a few other things':</li><li style='margin-left: 30px;'><b>LEDs</b> <i>m1</i> - Uses only 1 function call to control the LEDs (easy), ev3.Leds.set_color(side, color)</li><li style='margin-left: 30px;'><b>Sound</b> <i>m2</i> - Four function calls to make sounds, .beep() .speak() .tone() and .play()</li><li style='margin-left: 30px;'><b>The Screen</b> <i>m3</i> - While the screen on the EV3 can do many things it is not the focus of our project.  We will only use it to display full screen bmp images.  Use <b>sudo chvt 6</b> to stop Brickman and <b>sudo chvt 1</b> to restart Brickman.</li><li style='margin-left: 30px;'><b>The Arm</b> <i>m4 & m5</i> - To make the arm go up and down we need to use our knowledge of motors and the TouchSensor.</li></ul>"
3,Tkinter and MQTT,1,Introduction to this unit,yes,Questions,https://github.com/Rosebotics/ev3dev-curriculum,ZKR8pdr7CnI,"<ul><li>This unit consist of two major topics:</li><li style='margin-left: 30px;'><b>Tkinter</b> - A framework for making Graphical User Interfaces that is similar to Rosegraphics in some ways, but is designed for buttons, entry boxes, etc.</li><li style='margin-left: 30px;'><b>MQTT</b> - A framework for communicating in real time from one device to another (computer to computer or computer to robot)</li><li>In this video we'll show an example of the mini-project that we'll build for this unit called <b>m5_pc_remote_drive.py</b> (which runs on your PC) and <b>m5_ev3_remote_drive.py</b> (which runs on the robot)</li></ul>"
3,Tkinter and MQTT,2,Tkinter root window,yes,Questions,https://github.com/Rosebotics/ev3dev-curriculum,nTJBxofQLxk,"<ul><li>Start this unit by making a <b>fork</b> of the <a target='_blank' href='https://github.com/CSSE120StartingCode/TkinterPractice'>starting code from here</a> and setting up a PyCharm project</li><li>We'll learn Tkinter one step at a time, in this video we'll just make a window show up</li></ul>"
3,Tkinter and MQTT,3,Tkinter Buttons,yes,Questions,https://github.com/Rosebotics/ev3dev-curriculum,BgOlP4I6edY,"<ul><li>In this video we'll learn about Buttons</li><li>ttk.Button objects will use the lambda syntax to connect function callbacks (just like EV3 Digital Inputs used lambda)</li><li>Buttons are a simple but powerful way to make a Graphical User Interfaces</li></ul>"
3,Tkinter and MQTT,4,Tkinter Entry Box,yes,Questions,https://github.com/Rosebotics/ev3dev-curriculum,fD2wue3mwWI,"<ul><li>The next widget we need to learn about is an Entry box</li><li>An Entry box allows your users to enter string values</li></ul>"
3,Tkinter and MQTT,5,Tkinter Grid,yes,Questions,https://github.com/Rosebotics/ev3dev-curriculum,3bEbLf1KTK4,"<ul><li>In this video we'll learn how to pass <b>row</b> and <b>column</b> arguments into the .grid() method to make simple GUI layouts</li></ul>"
3,Tkinter and MQTT,6,MQTT Under the Hood,yes,Questions,https://github.com/Rosebotics/ev3dev-curriculum,VF_XFf6D-PE,"<ul><li>Note, this video is the beginning of the MQTT section, which you'll probably watch on a different day than the Tkinter videos.</li><li>We'll talk about how MQTT really works using examples.</li><li>MQTT clients connect to an MQTT server, called a Broker, then subscribe to topics.  Other clients also connect and potentially make subscriptions as well.  Then any client can publish a message on a particular topic. Any subscriber to that topic receives the message.</li><li>Every message in MQTT has two parts:</li><li style='margin-left: 30px;'>the <b>topic</b> - a string which determines who receives the message (example <b>lego01/msg4ev3</b>)</li><li style='margin-left: 30px;'>and the <b>message</b> - also a string, but we will format that string as JSON so that we can pass more complex messages (example <b>{'type': 'drive', 'payload': [600, 600]}</b>)</li></ul>"
3,Tkinter and MQTT,7,MQTT MqttClient API,yes,Questions,https://github.com/Rosebotics/ev3dev-curriculum,xMfqaNegY68,"<ul><li>Now it's time to learn about the <b>MqttClient</b> API, which can be found in the module <b>libs/mqtt_remote_method_calls.py</b>.</li><li>This video will teach you about the code you need to write.</li></ul>"
3,Tkinter and MQTT,8,MQTT Modules summary,yes,Questions,https://github.com/Rosebotics/ev3dev-curriculum,tzOza__T2gE,"<ul><li>As you work the MQTT modules you will find that we slowly introduce you to MQTT.  We'll start with a few MQTT programs that don't use the robot at all. Then we'll move into the robot examples.</li><li>In the robot examples, we'll start by writing one of the two sides of the communication for your, so that you only have to write 1 program.</li><li>For the final module <b>m5_ev3_remote_drive.py</b> and <b>m5_pc_remote_drive.py</b> you will need to write both programs.</li></ul>"
