unit_id,unit_title,lesson_id,lesson_title,lesson_activity,lesson_activity_name,lesson_notes,lesson_video_id,lesson_objectives
1,Welcome to iOS Development,1,Course Intro Demo,yes,Questions,https://docs.google.com/presentation/d/1DduW8izI7wXhYwkdcTrxtvf5aAM8mWhJ9MxPwliwlv4/edit?usp=sharing,hlvBaeYLWNI,"<ul><li>We'll start the course with a demo so you can just sit back and watch.</li><li>I'll be using Xcode 6.1 for iOS 8 in this video to show you an overview of what iOS development looks like.</li><li>Over time tools change, use the newest tools available.</li><li>We'll start this app with a Master-Detail Application and we won't write any Swift code until the next video.</li></ul>"
1,Welcome to iOS Development,2,ButtonsAndLabels,yes,Questions,https://docs.google.com/presentation/d/1DduW8izI7wXhYwkdcTrxtvf5aAM8mWhJ9MxPwliwlv4/edit?usp=sharing,h8KJ4Ckp5lQ,"<ul><li>We'll create a Swift file and create placeholder classes for all three view controllers in that file ButtonsAndLabelsViewController, TouchesViewController, and StudentTableViewController</li><li>We'll connect the Storyboard view controllers, add some Constrains, then make Button Actions and a Label Outlet</li><li>After that setup is complete we'll implement the ButtonsAndLabelsViewController</li><li>Here is the Swift code added, that uses the Outlet and Action connections from the Storyboard:</li></ul><script src='https://gist.github.com/fisherds/e748466f9bc01f11dfbd.js'></script>"
1,Welcome to iOS Development,3,TouchesViewController,yes,Questions,https://docs.google.com/presentation/d/1DduW8izI7wXhYwkdcTrxtvf5aAM8mWhJ9MxPwliwlv4/edit?usp=sharing,Ojxq57SYa7s,"<ul><li>We'll implement the TouchesViewController in this video.</li><li>We'll add an ImageView and move it around the screen using touches</li><li>Here is the Swift code used to implement this view controller:</li></ul><script src='https://gist.github.com/fisherds/f48804988b50fd7608f7.js'></script>"
1,Welcome to iOS Development,4,StudentTableViewController,yes,Questions,https://docs.google.com/presentation/d/1DduW8izI7wXhYwkdcTrxtvf5aAM8mWhJ9MxPwliwlv4/edit?usp=sharing,0-4zpJ_7xbI,"<ul><li>In this video we'll implement the StudentTableViewController.  This class won't use any IBOutlet or IBActions, however we will use the Storyboard to create a UITableViewCell Prototype called StudentCell</li><li>A UITableViewController is, by default, the delegate to its TableView so it <b>must</b> implement:</li><li style='margin-left: 30px;'><b>tableView:cellForRowAtIndexPath:</b> and <b>tableView:numberOfRowsInSection:</b></li><li>Optionally we'll also implement the delegate method for <b>tableView:didSelectRowAtIndexPath:</b></li></ul><script src='https://gist.github.com/fisherds/e312bfda45fd89b7a160.js'></script>"
1,Welcome to iOS Development,5,Why iOS?,yes,Questions,https://docs.google.com/presentation/d/1DduW8izI7wXhYwkdcTrxtvf5aAM8mWhJ9MxPwliwlv4/edit?usp=sharing,QkqFEciBQuw,"<ul><li>Just a chance to learn more about me and talk about why you might choose to learn about iOS Development</li><li>I'm guessing that since you are here you probably don't need to be convinced that iOS Development is a useful skill.</li></ul>"
1,Welcome to iOS Development,6,My short iOS Journey,,,https://docs.google.com/presentation/d/1DduW8izI7wXhYwkdcTrxtvf5aAM8mWhJ9MxPwliwlv4/edit?usp=sharing,VaYgoMZs2zs,"<ul><li>Another non-technical video just to learn a little bit more about big picture</li><li>The summary is that apps won't make you rich so don't quit your day job, but iOS development is a VERY useful job skill.</li><li>My path (that I recommend to others as well): Work a day job to pay the bills (great if you use iOS there too!) and find some people to work with on a small business for fun.  Going solo as an app developer will probably not bring you the fame and fortune you seek. :)</li></ul>"
1,Welcome to iOS Development,7,Hello World Lab,yes,Questions,https://docs.google.com/presentation/d/1DduW8izI7wXhYwkdcTrxtvf5aAM8mWhJ9MxPwliwlv4/edit?usp=sharing,1gvgqX4wMGs,"<ul><li>Here is the link to the <a target='_blank' href='https://docs.google.com/document/d/1gUmpnVILZbFEpLl8yLDUR28mqBxyCBJZH975AUrkEMU/edit?usp=sharing'>Xcode Installation / Hello World Lab Instructions</a></li><li>You will install Xcode and show that you have the tools installed so you can start the course.</li></ul>"
2,Interface Builder,1,Intro to Interface Builder,yes,Questions,https://docs.google.com/presentation/d/1sSTGofCK5Bzw3sXfqW5RCL2SyQZGOpVhRjsG9KO-vJQ/edit?usp=sharing,p1_Yuk3nwjA,"<ul><li>We'll get started adding Constraints to our views so that they adjust to different screen size.</li><li>So far (2015) iPhone has four sizes (<a target='_blank' href='https://www.apple.com/iphone/compare/'>/apple/iphone/compare</a>): 5.5 inches, 4.7 inches, 4 inches, and the older original 3.5 inch (not shown)<br><img style='width: 50%; margin-left: 20%;' src='assets/img/iphone_sizes.png' alt='iPhone sizes'><br></li><li>With all these new sizes there have been changes to iOS development that require you to start using the Constraints system in Interface Builder.  We'll start showing you the different ways to add Constrains for you layouts.</li></ul>"
2,Interface Builder,2,Update to UI for Landscape,yes,Questions,https://docs.google.com/presentation/d/1sSTGofCK5Bzw3sXfqW5RCL2SyQZGOpVhRjsG9KO-vJQ/edit?usp=sharing,oBEjGGECZoA,"<ul><li>We'll clear all of our old Constraints, simplify our UI a bit, and start over with our layout (good practice).</li><li>We'll add a new Contraint for center Y which will be our first alignment constraint and Equal Widths (which is very handy).</li><li>You can add Constraints using right click drag, the pin view icon, the menu system, or hope for the best with auto layout.</li></ul>"
2,Interface Builder,3,IBActions and IBOutlets,yes,Questions,https://docs.google.com/presentation/d/1sSTGofCK5Bzw3sXfqW5RCL2SyQZGOpVhRjsG9KO-vJQ/edit?usp=sharing,37mN-Qe9z3I,"<ul><li>We'll connect our Storyboard views to our code this time using IBActions and IBOutlets</li><li>There are 9 IBOutlets: 4 sliders, 4 labels, and the color view at the bottom</li><li>There are 4 IBAction connections which all call the same function</li><li>To demonstrate our connections we'll create simple console messages via <b>println</b></li></ul>"
2,Interface Builder,4,Swift code to finish Color Sliders,yes,Questions,https://docs.google.com/presentation/d/1sSTGofCK5Bzw3sXfqW5RCL2SyQZGOpVhRjsG9KO-vJQ/edit?usp=sharing,t-GZ7dGhu5c,"<ul><li>We'll add the Swift code necessary to display the slider values in the labels using 2 decimal places.</li><li>We'll also create a UIColor based on the slider values and set that color as the background of our view</li><li>Here is the Swift code added in this step:</li></ul><script src='https://gist.github.com/fisherds/6ccb87dae5e347b5f6dc.js'></script>"
2,Interface Builder,5,Starting Flexible Layout,yes,Questions,https://docs.google.com/presentation/d/1sSTGofCK5Bzw3sXfqW5RCL2SyQZGOpVhRjsG9KO-vJQ/edit?usp=sharing,zFlEBRuIL_0,"<ul><li>Next up we'll start a new project called <b>FlexibleLayoutPractice</b></li><li>Our goal in this video is to simply make two views that evenly split the screen (top and bottom)</li><li>We'll use an Equal Heights constraint and pin the views on all sides</li></ul>"
2,Interface Builder,6,Finishing Flexible Layouts,yes,Questions,https://docs.google.com/presentation/d/1sSTGofCK5Bzw3sXfqW5RCL2SyQZGOpVhRjsG9KO-vJQ/edit?usp=sharing,FgSX_tIKH7c,"<ul><li>Next up we'll add two views to the top and five views to the bottom.</li><li>They need to evenly divide the horizontal space.</li><li>As a final step we'll add a text field that is constrained within the bottom middle view.</li><li>When you finish the app submit it on Moodle (assuming you are taking this course for a grade)</li></ul>"
2,Interface Builder,7,ScoreKeeper Lab,yes,Questions,https://docs.google.com/presentation/d/1sSTGofCK5Bzw3sXfqW5RCL2SyQZGOpVhRjsG9KO-vJQ/edit?usp=sharing,LYW-dQVuxFA,"<ul><li>Here is the link to the <a target='_blank' href='https://docs.google.com/document/d/1seS3sy6n4VCh4AldYAl9q1vH3-bLHOz85RuG_tOzAeA/edit?usp=sharing'>ScoreKeeper Lab</a></li><li>You'll create a real app that needs a flexible layout.</li></ul>"
3,Swift Playgrounds,1,Basics,yes,Questions,https://docs.google.com/presentation/d/1OlcciKqTEFkHGOI8CsqTWZg6co6LDy6F_Xu5nHqj4Mw/edit?usp=sharing,M3BGJaTj-BI,"<ul><li>Welcome to learning about Swift with Playgrounds</li><li>Here is a link to <a target='_blank' href='https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/'>Apple's main Swift documentation page</a></li><li>Here is a link to <a target='_blank' href='https://github.com/iOSCourseMaterial/SwiftPlaygrounds'>the Github starting code</a></li><li>And here is the code developed in this video:</li></ul><script src='https://gist.github.com/fisherds/169d393e19cb72858b83.js'></script>"
3,Swift Playgrounds,2,Optionals,yes,Questions,https://docs.google.com/presentation/d/1OlcciKqTEFkHGOI8CsqTWZg6co6LDy6F_Xu5nHqj4Mw/edit?usp=sharing,BnUpzxo0TDA,"<ul><li>Here is a link to Apple's documentation on <a target='_blank' href='https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-XID_496'>Optionals</a></li><li>Here is the code generated in this video:</li></ul><script src='https://gist.github.com/fisherds/c1a6a30967aece439226.js'></script>"
3,Swift Playgrounds,3,Optionals with UIKit,yes,Questions,https://docs.google.com/presentation/d/1OlcciKqTEFkHGOI8CsqTWZg6co6LDy6F_Xu5nHqj4Mw/edit?usp=sharing,O_XWc39Nv0E,"<ul><li>Here is a link to Apple's documentation on <a target='_blank' href='https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-XID_496'>Optionals</a></li><li>Here is the code generated in this video:</li></ul><script src='https://gist.github.com/fisherds/40c53281ef271f4b3cf5.js'></script>"
3,Swift Playgrounds,4,Strings,yes,Questions,https://docs.google.com/presentation/d/1OlcciKqTEFkHGOI8CsqTWZg6co6LDy6F_Xu5nHqj4Mw/edit?usp=sharing,AkyxMFNBYNE,"<ul><li>Here is a link to Apple's documentation on <a target='_blank' href='https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/StringsAndCharacters.html#//apple_ref/doc/uid/TP40014097-CH7-XID_431'>Strings</a></li><li>Here is the code generated in this video:</li></ul><script src='https://gist.github.com/fisherds/7125191038b9eba5c5c4.js'></script>"
3,Swift Playgrounds,5,Collections,yes,Questions,https://docs.google.com/presentation/d/1OlcciKqTEFkHGOI8CsqTWZg6co6LDy6F_Xu5nHqj4Mw/edit?usp=sharing,63zWLnG26l8,"<ul><li>Here is a link to Apple's documentation on <a target='_blank' href='https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/CollectionTypes.html#//apple_ref/doc/uid/TP40014097-CH8-XID_167'>Collections</a></li><li>Here is the code generated in this video:</li></ul><script src='https://gist.github.com/fisherds/91507a28d07634b94c9c.js'></script>"
3,Swift Playgrounds,6,Function Basics,yes,Questions,https://docs.google.com/presentation/d/1OlcciKqTEFkHGOI8CsqTWZg6co6LDy6F_Xu5nHqj4Mw/edit?usp=sharing,2Bhwj9il2_g,"<ul><li>Here is a link to Apple's documentation on <a target='_blank' href='https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Functions.html#//apple_ref/doc/uid/TP40014097-CH10-XID_243'>Functions</a></li><li>Here is the code generated in this video:</li></ul><script src='https://gist.github.com/fisherds/3bc30a8b22e0f2b08340.js'></script>"
3,Swift Playgrounds,7,Functions returning Tuples,yes,Questions,https://docs.google.com/presentation/d/1OlcciKqTEFkHGOI8CsqTWZg6co6LDy6F_Xu5nHqj4Mw/edit?usp=sharing,Rl1jBA12U2s,"<ul><li>Here is a link to Apple's documentation on <a target='_blank' href='https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Functions.html#//apple_ref/doc/uid/TP40014097-CH10-XID_243'>Functions</a></li><li>Here is the code generated in this video:</li></ul><script src='https://gist.github.com/fisherds/da88a8674dda907acf5e.js'></script>"
3,Swift Playgrounds,8,Functions with Optional Parameters,yes,Questions,https://docs.google.com/presentation/d/1OlcciKqTEFkHGOI8CsqTWZg6co6LDy6F_Xu5nHqj4Mw/edit?usp=sharing,gL5AgJEhHWo,"<ul><li>Here is a link to Apple's documentation on <a target='_blank' href='https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Functions.html#//apple_ref/doc/uid/TP40014097-CH10-XID_243'>Functions</a></li><li>Here is the code generated in this video:</li></ul><script src='https://gist.github.com/fisherds/55e10dcb16df317190eb.js'></script>"
3,Swift Playgrounds,9,Closures,yes,Questions,https://docs.google.com/presentation/d/1OlcciKqTEFkHGOI8CsqTWZg6co6LDy6F_Xu5nHqj4Mw/edit?usp=sharing,JNNIyXniwSc,"<ul><li>Here is a link to Apple's documentation on <a target='_blank' href='https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Closures.html#//apple_ref/doc/uid/TP40014097-CH11-XID_151'>Closures</a></li><li>Here is the code generated in this video:</li></ul><script src='https://gist.github.com/fisherds/5124249a84341a26d8b7.js'></script>"
3,Swift Playgrounds,10,Closure Shorthand,yes,Questions,https://docs.google.com/presentation/d/1OlcciKqTEFkHGOI8CsqTWZg6co6LDy6F_Xu5nHqj4Mw/edit?usp=sharing,zXHc3HPeENw,"<ul><li>Here is a link to Apple's documentation on <a target='_blank' href='https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Closures.html#//apple_ref/doc/uid/TP40014097-CH11-XID_151'>Closures</a></li><li>Here is the code generated in this video:</li></ul><script src='https://gist.github.com/fisherds/5504a4c548914c1f45c7.js'></script>"
3,Swift Playgrounds,11,Enums,yes,Questions,https://docs.google.com/presentation/d/1OlcciKqTEFkHGOI8CsqTWZg6co6LDy6F_Xu5nHqj4Mw/edit?usp=sharing,4-CU1PSuBgs,"<ul><li>Here is a link to Apple's documentation on <a target='_blank' href='https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Enumerations.html#//apple_ref/doc/uid/TP40014097-CH12-XID_221'>Enums</a></li><li>Here is the code generated in this video:</li></ul><script src='https://gist.github.com/fisherds/9eda9a5543fbf76266fa.js'></script>"
3,Swift Playgrounds,12,Enums with Associated Values,yes,Questions,https://docs.google.com/presentation/d/1OlcciKqTEFkHGOI8CsqTWZg6co6LDy6F_Xu5nHqj4Mw/edit?usp=sharing,o6IWY5S6dCk,"<ul><li>Here is a link to Apple's documentation on <a target='_blank' href='https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Enumerations.html#//apple_ref/doc/uid/TP40014097-CH12-XID_221'>Enums</a></li><li>Here is the code generated in this video:</li></ul><script src='https://gist.github.com/fisherds/b402131423ea6a673579.js'></script>"
3,Swift Playgrounds,13,Classes,yes,Questions,https://docs.google.com/presentation/d/1OlcciKqTEFkHGOI8CsqTWZg6co6LDy6F_Xu5nHqj4Mw/edit?usp=sharing,6S62CoJJ4CM,"<ul><li>Here is a link to Apple's documentation on <a target='_blank' href='https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ClassesAndStructures.html#//apple_ref/doc/uid/TP40014097-CH13-XID_134'>Classes</a></li><li>Here is the code generated in this video:</li></ul><script src='https://gist.github.com/fisherds/52b4c12df78fcda11e8a.js'></script>"
3,Swift Playgrounds,14,Subclasses,yes,Questions,https://docs.google.com/presentation/d/1OlcciKqTEFkHGOI8CsqTWZg6co6LDy6F_Xu5nHqj4Mw/edit?usp=sharing,ZFM1SA8hXQU,"<ul><li>Here is a link to Apple's documentation on <a target='_blank' href='https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ClassesAndStructures.html#//apple_ref/doc/uid/TP40014097-CH13-XID_134'>Classes</a></li><li>Here is a link to Apple's documentation on <a target='_blank' href='https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html#//apple_ref/doc/uid/TP40014097-CH18-ID203'>Initialization</a></li><li>Here is the code generated in this video:</li></ul><script src='https://gist.github.com/fisherds/aafd9267e8a99568e2cb.js'></script>"
3,Swift Playgrounds,15,TicTacToeGame Enums,,,https://docs.google.com/presentation/d/1OlcciKqTEFkHGOI8CsqTWZg6co6LDy6F_Xu5nHqj4Mw/edit?usp=sharing,lD6nnGJZTsc,"<ul><li>We'll start creating a model object for a Tic-Tac-Toe game (no UI just the model object that backs it up).</li><li>In this video we'll decide how to save that state of the Tic-Tac-Toe game with enums.</li><li>We'll create a single designated initializer and then call that good enough for now.</li></ul>"
3,Swift Playgrounds,16,TicTacToeGame Printing,yes,Questions,https://docs.google.com/presentation/d/1OlcciKqTEFkHGOI8CsqTWZg6co6LDy6F_Xu5nHqj4Mw/edit?usp=sharing,fG9rFHh5_fw,"<ul><li>Since we'd like to print out this custom object we'll implement the Printable protocol.</li><li>We'll be a little sneaky and write a function that will help us later too (and practice optional parameters).</li></ul>"
3,Swift Playgrounds,17,TicTacToeGame Logic,yes,Questions,https://docs.google.com/presentation/d/1OlcciKqTEFkHGOI8CsqTWZg6co6LDy6F_Xu5nHqj4Mw/edit?usp=sharing,8fUueOs03VA,"<ul><li>We'll finish off the TicTacToeGame this time.</li><li>Obviously the sneaky part is figuring out if the game is won, still in progress, or a tie.  There are MANY ways to do this.  I think I've picked a simple enough approach.</li><li>Once you complete this follow along make sure to zip your follow alongs folder and submit it on Moodle (assuming you are taking this course for credit).</li></ul>"
3,Swift Playgrounds,18,LightsOut model object lab,yes,Questions,https://docs.google.com/presentation/d/1OlcciKqTEFkHGOI8CsqTWZg6co6LDy6F_Xu5nHqj4Mw/edit?usp=sharing,FmRRMFcc7zo,"<ul><li>Time for a Swift Playground lab. Here is the link to the <a target='_blank' href='https://docs.google.com/document/d/18nWb7djhNyj8W7QJjJZ9f2KoRMb4wcqWBrHtw4RTujk/edit?usp=sharing'>LinearLightsOutGame model object lab</a></li><li>It's a fun little model object challenge that is similar to the TicTacToeGame model object, just for a different game.</li><li>Once you finish the lab submit it on Moodle (assuming you are taking this class for credit)</li></ul>"
4,Universal Apps with MVC,1,Understanding the difference between iPhone and Universal apps,yes,Questions,https://docs.google.com/presentation/d/1oQyZnRYh70w9-2pJbmwCbMQUkpIFWgFiNROWvEF6fe8/edit?usp=sharing,ADIDb1-IaqM,"<ul><li>Time to get started with a new unit on Universal Apps that use the Model-View-Controller design pattern.</li><li>In this video we'll make a project and see what an iPhone, iPad, or Universal app looks like on different simulators.</li><li>Name this app <b>SizeClasses</b> because we'll use it again in a later video (which will be about Size Classes)</li></ul>"
4,Universal Apps with MVC,2,To be a Universal App or Not to be,yes,Questions,https://docs.google.com/presentation/d/1oQyZnRYh70w9-2pJbmwCbMQUkpIFWgFiNROWvEF6fe8/edit?usp=sharing,FBhMuQOgIIM,"<ul><li>This video is less technical.  It's just a chance to talk pros and cons of being a Universal app or not.</li><li>Note, for your project in this course I am requiring you to use a Universal app, but it's still good stuff to think about. ;)</li><li>You have three choices when it comes to creating a Universal app (instead of just an iPhone app):</li><li style='margin-left: 30px;'>Do <b>A LOT</b> - Be a universal app and make a UISplitViewController for example (or more)</li><li style='margin-left: 30px;'>Do <b>very little</b> - Be a universal app and take what you get for free with your iPhone constraints (maybe small font changes)</li><li style='margin-left: 30px;'>Do <b>NOTHING</b> - Be an iPhone app and let iPad users get the pixel zoom version</li></ul>"
4,Universal Apps with MVC,3,Understanding Size Classes,yes,Questions,https://docs.google.com/presentation/d/1oQyZnRYh70w9-2pJbmwCbMQUkpIFWgFiNROWvEF6fe8/edit?usp=sharing,B6yHvPvQbyw,"<ul><li>We'll talk about pixels, points, the history of iPhone sizes, and finally <b>Size Classes</b>.</li><li>Size classes are the first way you should think about device sizes and orientations, but which devices fall into each category?</li></ul><img src='assets/img/size_classes.png' style='width: 400px; margin-left: -200px; position: relative; left: 50%;' alt='Size Classes'>"
4,Universal Apps with MVC,4,Practicing with Size Classes,yes,Questions,https://docs.google.com/presentation/d/1oQyZnRYh70w9-2pJbmwCbMQUkpIFWgFiNROWvEF6fe8/edit?usp=sharing,j3RlAnVBRUY,"<ul><li>Time to get our hands dirty with Size Classes!</li><li>We'll have you make a single label that has different constraints on different storyboards</li><li>Then we'll make 4 labels that only exist in only 1 storyboard each.</li><li>Then we'll finish up with a challenge for you to make 2 labels that exist on 2 final value storyboards with specific constraints</li><li>When you complete the SizeClasses app submit it on Moodle (assuming you are taking this course for credit)</li></ul>"
4,Universal Apps with MVC,5,Starting our Tic-Tac-Toe Universal app,yes,Questions,https://docs.google.com/presentation/d/1oQyZnRYh70w9-2pJbmwCbMQUkpIFWgFiNROWvEF6fe8/edit?usp=sharing,Du0iuACdKD8,"<ul><li>The next MANY videos will be about designing and implementing the View for a Universal Tic-Tac-Toe game.</li><li>Note we created the Model in the last unit (via a Playground) and we'll add the code to make the Controller later (much later)</li><li>Here we'll establish our goals and make our first iPhone / iPad changes</li><li><a target='_blank' href='https://drive.google.com/file/d/0B-KIW0IjgQ5pVjR3aWZMWTRRdTg/view?usp=sharing'>Here is the link to the images that you will need to download</a>.</ul>"
4,Universal Apps with MVC,6,Adding helper views,yes,Questions,https://docs.google.com/presentation/d/1oQyZnRYh70w9-2pJbmwCbMQUkpIFWgFiNROWvEF6fe8/edit?usp=sharing,ATOK4cShS80,"<ul><li>One of my favorite tricks for flexible layouts is adding views that will later become Clear Color</li><li>We'll add a view for the Usable Area and the Game Board</li><li>These views will exist in both iPhone and iPad, but they will have different constraints</li></ul>"
4,Universal Apps with MVC,7,Adding buttons,yes,Questions,https://docs.google.com/presentation/d/1oQyZnRYh70w9-2pJbmwCbMQUkpIFWgFiNROWvEF6fe8/edit?usp=sharing,lCIPxdRQY4w,"<ul><li>We'll add a 3x3 grid of buttons that are equal width, equal height, and take up all the space (no margins) in the game board view</li><li>In addition to the constraints we'll add tags to the buttons (based on the layout below) and change the names to make life easier to review the constraints</li></ul>"
4,Universal Apps with MVC,8,Finishing the Storyboard,yes,Questions,https://docs.google.com/presentation/d/1oQyZnRYh70w9-2pJbmwCbMQUkpIFWgFiNROWvEF6fe8/edit?usp=sharing,eLqWWVXE0X8,"<ul><li>We'll add either the iPhone_board.png or the iPad_board.png background and make the helper views Clear Color.</li><li>This will complete the <b>View</b> part of the Model-<b>View</b>-Controller</li><li>Note: I've changed the iPad_board.png image slightly since making the video.  The bars are thinner now (20px instead of 30px) to make it look a bit cleaner.  So don't be surprised if your iPad_board looks a bit different than mine.</li></ul>"
4,Universal Apps with MVC,9,User Actions to update the Model,,,https://docs.google.com/presentation/d/1oQyZnRYh70w9-2pJbmwCbMQUkpIFWgFiNROWvEF6fe8/edit?usp=sharing,LpYsyUg1frQ,"<ul><li>We'll copy in the <b>Model</b> code from the previous unit (<a target='_blank' href='https://gist.github.com/fisherds/8be01a0f401677570601'>here is a link to a copy of that code if you have lost your code</a>)</li><li>Then we'll start writing the <b>Controller</b> code. We'll take the user actions (button clicks) and pass them to the model object.</li><li>We won't update the View yet, but we can play a game by watching the logs.</li></ul>"
4,Universal Apps with MVC,10,Updating the View to finish TTT,yes,Questions,https://docs.google.com/presentation/d/1oQyZnRYh70w9-2pJbmwCbMQUkpIFWgFiNROWvEF6fe8/edit?usp=sharing,yKnHFV1KDmo,"<ul><li>Updating the view consist of two tasks:</li><li style='margin-left: 30px;'>Update the game state label</li><li style='margin-left: 30px;'>Update the button images</li><li>After this video you can zip your project and submit it on Moodle (assuming you are taking this class for credit)</li></ul>"
4,Universal Apps with MVC,11,LinearLightsOut Lab,yes,Questions,https://docs.google.com/presentation/d/1oQyZnRYh70w9-2pJbmwCbMQUkpIFWgFiNROWvEF6fe8/edit?usp=sharing,qVmr1SXQ_cE,"<ul><li>Here is the link to the <a target='_blank' href='https://docs.google.com/document/d/1l0UGjmz0k0Cj0umzzVWkqF9BwSuZ2Bjx1Cg9PKNz22k/edit?usp=sharing'>Lights Out Universal App lab</a></li><li>You need to create a Universal app for Lights Out that uses that model object that you made in the previous lab.</li><li>Once you finish the lab submit it on Moodle (assuming you are taking this class for credit)</li></ul>"
5,The Interface Builder Apps in Objective-C,1,Converting the Color Sliders Storyboard,yes,Questions,https://docs.google.com/presentation/d/1Tm1NYW9HgEpsT5-chgGS0jwZfOqGoB3YlZUOl79OpWw/edit?usp=sharing,4IOU_NAo1D8,"<ul><li>We'll convert the Color Slider Storyboard to use an Objective-C View Controller instead of Swift.  Steps in the process will be:</li><li style='margin-left: 30px;'><b>Copy the project</b> - Keeps your Swift original intact.</li><li style='margin-left: 30px;'><b>Break all the IBOutlet and IBAction connections</b> - Don't want the Swift code to trigger runtime errors.</li><li style='margin-left: 30px;'><b>Create and connect an Objective-C based View Controller</b> - We'll remake all the code in Objective-C</li><li style='margin-left: 30px;'><b>Connect the IBOutlets and IBActions</b> - Make all the Storyboard connections to an Objective-C file.</li></ul>"
5,The Interface Builder Apps in Objective-C,2,Converting the Color Sliders code,yes,Questions,https://docs.google.com/presentation/d/1Tm1NYW9HgEpsT5-chgGS0jwZfOqGoB3YlZUOl79OpWw/edit?usp=sharing,AMEP8HFnCMw,"<ul><li>We'll go through function-by-function and convert the old Swift code to Objective-C</li><li>sliderChanged, then viewDidLoad, and finally updateView</li><li>This is just a little taste of life in Objective-C.  Be on the lookout for *  @  ; [[Class alloc] init] and other [ ]; in the code.</li><li>When you complete the Objective-C Color Sliders app submit it on Moodle.</li></ul>"
5,The Interface Builder Apps in Objective-C,3,ScoreKeeper Lab Prep,yes,Questions,https://docs.google.com/presentation/d/1Tm1NYW9HgEpsT5-chgGS0jwZfOqGoB3YlZUOl79OpWw/edit?usp=sharing,iQegY18hG0U,"<ul><li>The goal of this app is to help prepare you for Objective-C code you'll write in the lab.</li><li>We'll show the syntax for appending text to a UITextView, converting an NSString to an int, and dismissing the keyboard.</li><li>This app is pretty simple and you will NOT be turning it in (just for practice).</li></ul>"
5,The Interface Builder Apps in Objective-C,4,ScoreKeeper Objective-C Lab,yes,Questions,https://docs.google.com/presentation/d/1Tm1NYW9HgEpsT5-chgGS0jwZfOqGoB3YlZUOl79OpWw/edit?usp=sharing,vzr9HamB-jo,"<ul><li>Here is the link to the <a target='_blank' href='https://docs.google.com/document/d/1t-Ygh0abuugXo6hWWsJ0cjSuo_onuk9wa0BGgpue-zs/edit?usp=sharing'>ScoreKeeper Objective-C Lab</a></li><li>Make a copy of your Swift ScoreKeeper app, then use your Storyboard to recreate the ScoreKeeper app in Objective-C</li><li>Once you finish the lab submit it on Moodle (assuming you are taking this class for credit)</li></ul>"
