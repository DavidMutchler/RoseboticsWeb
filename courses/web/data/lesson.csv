unit_id,unit_title,lesson_id,lesson_title,lesson_activity,lesson_activity_name,lesson_notes,lesson_video_id,lesson_objectives
1,Intro to AppEngine,1,AppEngine Overview,yes,Questions,https://docs.google.com/presentation/d/1SzS6vb0Hqm2s5Ct7PkKh15BY47x9MU4rTJ9spM7xjxM/edit?usp=sharing,z9NYt5v32Zs,"<ul><li>AppEngine is a tool for...</li><li style='margin-left: 30px'>Serving your web apps to the world</li><li style='margin-left: 30px'>Creating APIs for your iOS and Android apps to sync data with the Google Cloud Platform</li><li>Fair warning: When I say the word 'AppEngine' I really mean AppEngine + the Datastore + Endpoints.  It's shorter to simply say 'AppEngine' and mean all three.</li></ul>"
1,Intro to AppEngine,2,Install Test Lab,yes,Questions,https://docs.google.com/document/d/1lzetitdvee5NLJLwa4P88GincZQbNGJcy52RHe9Yc0E/edit?usp=sharing,Np8dMizzunQ,"<ul><li>Here is the <a target='_blank' href='https://docs.google.com/document/d/1lzetitdvee5NLJLwa4P88GincZQbNGJcy52RHe9Yc0E/edit?usp=sharing'>link to the Installation Lab</a></li><li>You will install Eclipse, Python 2.7, the Python Google AppEngine SDK, and the PyDev Eclipse plugin</li><li>After you install the tools you'll register an AppEngine app at <a target='_blank' href='http://console.developers.google.com'>http://console.developers.google.com</a></li><li>Then you'll prove your tools work by deploying a VERY simple AppEngine app</li></ul>"
2,First AppEngine Web App,1,Project Setup,yes,Questions,https://docs.google.com/presentation/d/1YcFsapYxhVS7CZxYOJiZf5l6-pA92fuHaEEUafaQv00/edit?usp=sharing,uLqxbg4tA_4,"<ul><li>First we'll register an AppEngine app at <a target='_blank' href='http://console.developers.google.com'>http://console.developers.google.com</a> called <b>yourusername</b>-movie-quotes</li><li>Then we'll use Google AppEngine Launcher to create a simple starting point template</li><li>Then create a project in Eclipse for that code</li><li>Finally we'll make a small modification and make sure we can deploy our app</li><li>This setup process could be used for starting any new AppEngine project.</li></ul>"
2,First AppEngine Web App,2,MovieQuote model,yes,Questions,https://docs.google.com/presentation/d/1YcFsapYxhVS7CZxYOJiZf5l6-pA92fuHaEEUafaQv00/edit?usp=sharing,xLtMGZRMRA4,"<ul><li>The first step towards storing entities into the Datastore, is creating a custom subclass of ndb.Model.</li><li>Our ndb.Model subclass will be called MovieQuote, which will be used to store our movie quotes.</li><li>A MovieQuote will have 2 ndb.StringProperty attributes (i.e. member variables) and one ndb.DateTimeProperty attribute</li><li>Instances of our MovieQuote class can be stored in Google's Cloud Datastore, saved forever (automatically backed up in 3 data centers), then retrieved later</li><li>The Datastore can be accessed from virtually any device that can access the web (iOS, Android, and device with a browser)</li></ul>"
2,First AppEngine Web App,3,Adding Jinja,yes,Questions,https://docs.google.com/presentation/d/1YcFsapYxhVS7CZxYOJiZf5l6-pA92fuHaEEUafaQv00/edit?usp=sharing,TnvnafO8WQA,"<ul><li>Jinja2 is a mechanism to let you create HTML pages in an .html file then insert values from the Datastore as needed</li><li>Conceptually Jinja is similar to using %d or %s with a formatted print String except you can do <b>way</b> more with Jinja templates</li><li>In later videos we'll do things like making for loops inside Jinja, you can also do if statements, call Python functions, use filters, etc</li><li>In this video we are <b>only</b> setting up Jinja with the bare basics.  We are not using any 'real' Jinja features yet, just preparing the way.</li></ul><script src='https://gist.github.com/fisherds/e657dfe0b2b9c51b0823.js'></script>"
2,First AppEngine Web App,4,Form POST,yes,Questions,https://docs.google.com/presentation/d/1YcFsapYxhVS7CZxYOJiZf5l6-pA92fuHaEEUafaQv00/edit?usp=sharing,CH3XaoNYN74,"<ul><li>The easiest way to send data to your backend is with <b>input</b> elements inside a <b>form</b> element</li><li>Forms are similar to links except they are typically used to do a POST request which send the values in the <b>input</b> elements</li><li>In addition to making the html you need to create a post handler that will process the request</li><li>The post handler will save the quote to the Datastore then redirect a user to do a get request to display the main page.</li></ul>"
2,First AppEngine Web App,5,Query to Display Quotes,yes,Questions,https://docs.google.com/presentation/d/1YcFsapYxhVS7CZxYOJiZf5l6-pA92fuHaEEUafaQv00/edit?usp=sharing,PPMrhUlAhyI,"<ul><li>In order to display MovieQuotes on the page we need to query the Datastore for saved quotes</li><li>Crating a MovieQuote.query() is basically instantaneous, but executing the query (via fetch or a for loop) to pull data from the Datastore is a slower, more expensive operation.</li><li>We'll order the results of the Datastore lookup by -MovieQuote.last_touch_date_time.  That puts our last_touch_date_time property in reverse order (newest first)</li><li>In order to see the latest quote added we need to block the query until the put() event completes.  The way to get this Strong Consistency feature is to make the MovieQuote entities children of a parent key and use that parent key for an Ancestor Query.</li><li>Our Strong Consistency solution might not scale to millions of users (blocking isn't always great), but it'll work just fine for our needs today. :)</li></ul>"
2,First AppEngine Web App,6,Adding static files,yes,Questions,https://docs.google.com/presentation/d/1YcFsapYxhVS7CZxYOJiZf5l6-pA92fuHaEEUafaQv00/edit?usp=sharing,-obbDeqMKrY,"<ul><li>Serving regular files (static files) is easy with AppEngine</li><li>Create a folder called 'static' and state within app.yaml that you'd like to serve that folder.  Any file within that folder is now served with your app (note, of course, that when you deploy later those files are available publically to the whole world).</li><li>We'll add a CSS file to our static folder, and link to that CSS file from our HTML</li><li>This lecture is not about learning CSS so we'll simply give you some CSS rules to copy into that file and an <a target='_blank' href='https://drive.google.com/file/d/0B-KIW0IjgQ5peHVEM1pUVko2czA/edit?usp=sharing'>image</a>.</li></ul><script src='https://gist.github.com/fisherds/221f90e9cfc2e9b7f08b.js'></script>"
2,First AppEngine Web App,7,Deploy,yes,Questions,https://docs.google.com/presentation/d/1YcFsapYxhVS7CZxYOJiZf5l6-pA92fuHaEEUafaQv00/edit?usp=sharing,q7xi7DrDmy4,"<ul><li>We'll deploy our finished MovieQuotes web app from Eclipse</li><li>Next we'll visit <a target='_blank' href='http://console.developers.google.com'>http://console.developers.google.com</a> and look at a few of the developers tools available.</li><li>The developer tools we'll use include: the Logs, the status of the Indexes, and the Datastore Viewer</li></ul>"
2,First AppEngine Web App,8,Weatherpics Lab,yes,Questions,https://docs.google.com/document/d/1fTPFhmvL3Epy8nRaN1f5uxzSmr6vS6vwyJ87ZgSZaoY/edit?usp=sharing,I4GCVXByba4,"<ul><li>Here is the link to the <a target='_blank' href='https://docs.google.com/document/d/1fTPFhmvL3Epy8nRaN1f5uxzSmr6vS6vwyJ87ZgSZaoY/edit?usp=sharing'>Weatherpic non-Bootstrap web app lab</a></li><li>You will be making an AppEngine web app from scratch that is similar in MANY ways to the MovieQuotes app</li><li>At the end of the lab you will <a target='_blank' href='https://docs.google.com/forms/d/1VL7euP4Wl_nWRivuDNjE37hXhfh4lKTw2kLjssO9gko/viewform'>submit your deployed Weatherpics URL</a></li></ul>"
3,Intro to using Bootstrap and jQuery with AppEngine Web Apps,1,Overview,yes,Questions,https://docs.google.com/presentation/d/1Ra91pkSpH1IolHI1AqmYjA37i5FD5DYV0ZVUllmZfGU/edit?usp=sharing,vq6oO1gZ76k,"<ul><li>In this unit we'll be adding <a target='_blank' href='http://getbootstrap.com'>Bootstrap</a> and <a target='_blank' href='http://jquery.com/'>jQuery</a></li><li>Bootstrap is primarily a CSS framework used to making reusable components (examples include menus, dialog boxes, grid layouts, and all kinds of pretty things).</li><li>Bootstrap started internally at Twitter, but became freely available and is now the #1 most popular Github repo</li><li>jQuery is a VERY popular JavaScript library that makes JavaScript easier to learn and work with.</li><li>If you look at the top websites in the world around 60% use jQuery (i.e. it is VERY popular)</li></ul>"
3,Intro to using Bootstrap and jQuery with AppEngine Web Apps,2,Removing prior HTML and CSS,yes,Questions,https://docs.google.com/document/d/1gx9D_OBds0fI2jeYMc8xZqEep5kAjDjOlJacdguyOB4/edit?usp=sharing,VW6kiSUDNqw,"<ul><li>We'll check to make sure our prior version of MovieQuotes still works, then save a copy of the old html and css</li><li>We'll pave the way for the Bootstrap version by deleting all of the css and the entire body of our existing html</li><li>We'll also learn a bit more about how to pretend to be a smartphone using Chrome Dev Tools to emulate mobile devices</li></ul>"
3,Intro to using Bootstrap and jQuery with AppEngine Web Apps,3,Adding Bootstrap and jQuery frameworks via CDN,yes,Questions,https://docs.google.com/document/d/1gx9D_OBds0fI2jeYMc8xZqEep5kAjDjOlJacdguyOB4/edit?usp=sharing,FYCG102_giY,"<ul><li>Here is the code for the little test: <b>$('body').html('Hello, World!').addClass('bg-success');</b></li><li>That command will only work on a page that has both jQuery and Bootstrap properly loaded</li><li>The <a target='_blank' href='http://getbootstrap.com/getting-started/#download'>Bootstrap getting started page</a> has all the info we need. Here is a copy of the code used in the video (in case it changes)</li></ul><script src='https://gist.github.com/fisherds/c76661d77315b766e41b.js'></script>"
3,Intro to using Bootstrap and jQuery with AppEngine Web Apps,4,Bootstrap Navbar,yes,Questions,https://docs.google.com/document/d/1gx9D_OBds0fI2jeYMc8xZqEep5kAjDjOlJacdguyOB4/edit?usp=sharing,Af239RbU8IE,"<ul><li>The top portion of many web apps is a navigation bar.  It provides a mechanism users immediately understand to use a web app.</li><li>You can learn more about the Bootstrap Navbar component here: <a target='_blank' href='http://getbootstrap.com/components/#navbar'>http://getbootstrap.com/components/#navbar</a></li><li>The Navbar for our MovieQuotes app will include an <b>Add Quote</b> link and an <b>Edit</b> link</li><li>The Bootstrap Navbar is a responsive component that works well on mobile right out of the box.</li><li>Here is a copy of the Navbar code used in the video (in case it changes)</li></ul><script src='https://gist.github.com/fisherds/20aa390d23f9fb9edaf1.js'></script>"
3,Intro to using Bootstrap and jQuery with AppEngine Web Apps,5,Bootstrap Modal to Add Quotes,yes,Questions,https://docs.google.com/document/d/1gx9D_OBds0fI2jeYMc8xZqEep5kAjDjOlJacdguyOB4/edit?usp=sharing,7QIfjLqr1-4,"<ul><li>Dialog boxes (called Modals in Bootstrap) can be a great UI tool for focusing a users attention on their current task.</li><li>You can learn more about Bootstrap Modals here: <a target='_blank' href='http://getbootstrap.com/javascript/#modals'>http://getbootstrap.com/javascript/#modals</a></li><li>We'll put a form into our Modal (next time) to Add Quotes</li><li>Here is a copy of the Modal code used in the video (in case it changes)</li></ul><script src='https://gist.github.com/fisherds/a1fecd11a7fd9cda8ae1.js'></script>"
3,Intro to using Bootstrap and jQuery with AppEngine Web Apps,6,Bootstrap Form to Add Quotes,yes,Questions,https://docs.google.com/document/d/1gx9D_OBds0fI2jeYMc8xZqEep5kAjDjOlJacdguyOB4/edit?usp=sharing,D-Ikj0KAA2M,"<ul><li>We've used the form element before to send data to the backend from the page, now we'll make it Bootstrap pretty.</li><li>Our form will go into a Modal, which is a pretty common design pattern.</li><li>At the end of the video make sure you try resizing the page to see how your form will reflow.  It's pretty slick too.</li><li>Here is a copy of the Form code used in the video (in case it changes)</li></ul><script src='https://gist.github.com/fisherds/8afdddb7b0cf891e8465.js'></script>"
3,Intro to using Bootstrap and jQuery with AppEngine Web Apps,7,Bootstrap Tables to Display Quotes,yes,Questions,https://docs.google.com/document/d/1gx9D_OBds0fI2jeYMc8xZqEep5kAjDjOlJacdguyOB4/edit?usp=sharing,PmIyZVUhViA,"<ul><li>Displaying quotes will again use Jinja, but instead of an unordered list we'll use a table</li><li>A table is an existing html component so the Bootstrap additions will be in the <b>css</b> area.</li><li>To learn more about Bootstrap tables visit this link: <a target='_blank' href='http://getbootstrap.com/css/#tables'>http://getbootstrap.com/css/#tables</a></li><li>Additionally we'll wrap our table in a <b>container</b> and custom <b>table-wrapper</b></li><li>Here is a copy of the Table code used in the video (in case it changes)</li></ul><script src='https://gist.github.com/fisherds/88591ad7d9ef16b30a0c.js'></script></script>"
3,Intro to using Bootstrap and jQuery with AppEngine Web Apps,8,Static Display of the Edit and Delete buttons,yes,Questions,https://docs.google.com/document/d/1gx9D_OBds0fI2jeYMc8xZqEep5kAjDjOlJacdguyOB4/edit?usp=sharing,hFbW4_GJxOU,"<ul><li>In this video we'll make the pretty green edit buttons and red delete buttons</li><li>We'll learn about <a target='_blank' href='http://getbootstrap.com/css/#buttons'>Bootstrap buttons</a> and <a href='http://getbootstrap.com/components/#glyphicons' target='_blank'>Bootstrap Glyphicons</a></li><li>We won't add any JavaScript this time, we just want to see the buttons in a static way (either present or absent all the time)</li><li>We will add a class to the elements called <b>edit-actions</b> to prepare for later JavaScript.</li></ul>"
3,Intro to using Bootstrap and jQuery with AppEngine Web Apps,9,Adding jQuery to show edit-actions column,yes,Questions,https://docs.google.com/document/d/1gx9D_OBds0fI2jeYMc8xZqEep5kAjDjOlJacdguyOB4/edit?usp=sharing,KUPTbACZ-x0,"<ul><li>We'll add a .js file to our /static folder for some JavaScript + jQuery fun!</li><li>In order to use that .js file in our page we need to add a &lt;script> tag to the .html template with the <b>src</b> attribute pointing to that file</li><li>We'll start by adding the bare minimum jQuery to show and hide the edit-actions column.</li><li>Then we'll continue to show some best-practice structure to our JavaScript that we'll use throughout the course (you don't need to understand it all yet, just a JS preview)</li></ul>"
3,Intro to using Bootstrap and jQuery with AppEngine Web Apps,10,Launch Bootstrap Modal from edit button,yes,Questions,https://docs.google.com/document/d/1gx9D_OBds0fI2jeYMc8xZqEep5kAjDjOlJacdguyOB4/edit?usp=sharing,1u9avLTo7cA,"<ul><li>This video will be part 1 of 2 on preparing the client side for Edits</li><li>In this part we'll make the Modal appear when you click an edit button, but it won't be functionally complete yet.</li><li>The Modal will have the correct title and submit button text and it will autofocus on the top input box.</li></ul>"
3,Intro to using Bootstrap and jQuery with AppEngine Web Apps,11,Finish client-side Edit functionality,yes,Questions,https://docs.google.com/document/d/1gx9D_OBds0fI2jeYMc8xZqEep5kAjDjOlJacdguyOB4/edit?usp=sharing,e7ocluv6fCo,"<ul><li>In order to edit a Datastore entity you must tell the backend the entity <b>key</b> for the item so that it knows what entity to edit.</li><li>In order to send the entity key to the backend we'll add a hidden input to our form that will be populated by JavaScript.  A user won't even know it's there.</li><li>In order to get the entity key into the form we'll write a urlsafe version of the key into a hidden div within the Edit button, then pull it out if a user clicks the button and write it into the hidden form input.</li><li>Later, our backend will look to see if the form submission has an entity or not.  If there is no entity present then the backend will assume it is a new quote being added.  If an entity key is present, the backend will do an edit instead.</li></ul>"
3,Intro to using Bootstrap and jQuery with AppEngine Web Apps,12,Backend changes to Edit a MovieQuote,yes,Questions,https://docs.google.com/document/d/1gx9D_OBds0fI2jeYMc8xZqEep5kAjDjOlJacdguyOB4/edit?usp=sharing,JfprWpFOAZI,"<ul><li>We'll implement the backend changes to Edit a MovieQuote (instead of just always doing an add)</li><li>If an entity_key is present the handler will perform an Edit, if no entity_key is present the handler will perform an Add</li><li>We'll also learn a bit more about NDB Keys (just a little)</li></ul>"
3,Intro to using Bootstrap and jQuery with AppEngine Web Apps,13,Client side Delete Challenge,yes,Questions,https://docs.google.com/document/d/1gx9D_OBds0fI2jeYMc8xZqEep5kAjDjOlJacdguyOB4/edit?usp=sharing,zYYJy9QrbF8,"<ul><li>Client side delete is similar (and simplier than) client side edit</li><li>Since it is so similar see if you can do it SOLO!</li><li>There are hints/tips available <a target='_blank' href='https://docs.google.com/document/d/1gx9D_OBds0fI2jeYMc8xZqEep5kAjDjOlJacdguyOB4/edit#heading=h.iq4b3o7desrq'>in the slides in the Client Side Delete Challenge section</a>.</li></ul>"
3,Intro to using Bootstrap and jQuery with AppEngine Web Apps,14,Client side Delete Solution,yes,Questions,https://docs.google.com/document/d/1gx9D_OBds0fI2jeYMc8xZqEep5kAjDjOlJacdguyOB4/edit?usp=sharing,Pfnrt1hqMNM,"<ul><li>Setting up the client side code for delete involves three steps:</li><li style='margin-left: 30px'>Modal - Copy the other Modal and simplify it down to just a single hidden input.</li><li style='margin-left: 30px'>The Delete button - Make it launch the modal, contain the entity-key, and have a class so JS can find it.</li><li style='margin-left: 30px'>JavaScript - When a Delete button is clicked, pull the entity-key from the button and use the value to populate the hidden entity_name form input</li></ul>"
3,Intro to using Bootstrap and jQuery with AppEngine Web Apps,15,Backend Delete Handler then Deploy,yes,Questions,https://docs.google.com/document/d/1gx9D_OBds0fI2jeYMc8xZqEep5kAjDjOlJacdguyOB4/edit?usp=sharing,YU_mWd3NXqA,"<ul><li>In order to delete a quote, first use the urlsafe entity_key to create an ndb.Key</li><li>Then .delete() is called on the ndb.Key.  That's it.  Finish by redirecting to the MovieQuotesPage</li><li>Once that works the <b>with Bootstrap</b> app is done! Deploy then <a target='_blank' href='https://docs.google.com/forms/d/1o9fmeOOYcm-P5qex2xNI9WJki9a9ew8HeNuSRu2aws8/viewform'>submit your URL for grading</a> (if you are taking this class for a grade)</li></ul>"
3,Intro to using Bootstrap and jQuery with AppEngine Web Apps,16,Weatherpics with Bootstrap Lab,yes,Questions,https://docs.google.com/document/d/1KpGXgjoCknGEEPZv6K2GwrTU0Roe_Df-MXC374MG7d0/edit?usp=sharing,Qp0fFmdA3eQ,"<ul><li>Here is the link to the <a target='_blank' href='https://docs.google.com/document/d/1KpGXgjoCknGEEPZv6K2GwrTU0Roe_Df-MXC374MG7d0/edit?usp=sharing'>Weatherpic with Bootstrap web app lab</a></li><li>You will be adding Bootstrap and jQuery to the Weatherpics web app from the last unit</li><li>At the end of the lab you will <a target='_blank' href='https://docs.google.com/forms/d/1NNwLvOvY9__XTZcBtu0XTMJfUkaq-SJ_-uCgwz2eVDU/viewform'>submit your deployed Weatherpics URL</a>.  Note, that is the same URL as the last lab, but submitting it let's me know you are done and ready for grading (assuming you are taking this class for credit)</li></ul>"
4,Designing Datastore Models,1,Overview,yes,Questions,https://docs.google.com/presentation/d/1S3a5xa0rl2-FlGtEB4hfY_H2UUA4_mmweGUCCpWGTT4/edit?usp=sharing,_XlqiAZIc6w,"<ul><li>We'll be building 3 web apps in this unit.  You can visit demos of them at these links:</li><li style='margin-left: 30px'><a target='_blank' href='http://fisherds-guestbook.appspot.com'>http://fisherds-guestbook.appspot.com</a></li><li style='margin-left: 30px'><a target='_blank' href='http://fisherds-grade-recorder.appspot.com'>http://fisherds-grade-recorder.appspot.com</a> also available at <a target='_blank' href='http://graderecorder.com'>http://graderecorder.com</a></li><li style='margin-left: 30px'><a target='_blank' href='http://dicewithfriends.com'>http://dicewithfriends.com</a></li><li>After you finish watching the video the next activity is a lab</li><li style='margin-left: 30px'><a target='_blank' href='http://fisherds-guestbook.appspot.com'>Here is the link to the lab</a></li></ul>"
4,Designing Datastore Models,2,Datastore Keys,yes,Questions,https://docs.google.com/presentation/d/1S3a5xa0rl2-FlGtEB4hfY_H2UUA4_mmweGUCCpWGTT4/edit?usp=sharing,ilgAikVH_vw,"<ul><li>An NDB Key consist of a <b>Kind</b>, <b>identifier</b> (either a random integer or a manually selected key name string), and an <b>ancestor path</b></li><li>Keys are often structured in a tree as a mechanism to make relationships between data and provide Strong Consistency</li><li>While we are talking about keys we should mention the KeyProperty, which is used when one Entity needs to point to another</li><li>Most keys DO point to entities, but a key does not have to point to an entity (which is sometimes a useful trick)</li><li>Great 5 minute read to help cement your understand: <a target='_blank' href='https://developers.google.com/datastore/docs/concepts/overview'>https://developers.google.com/datastore/docs/concepts/overview</a></li></ul>"
4,Designing Datastore Models,3,Project Setup,yes,Questions,https://docs.google.com/presentation/d/1S3a5xa0rl2-FlGtEB4hfY_H2UUA4_mmweGUCCpWGTT4/edit?usp=sharing,tL44oYoxfvE,"<ul><li>First you'll need to visit <a target='_blank' href='http://console.developers.google.com'>http://console.developers.google.com</a> to register <b>yourusername-grade-recorder</b></li><li>Next you'll need to download the starter code from: <a target='_blank' href='https://github.com/WebDevCourseMaterial/GradeRecorderWebDev'>https://github.com/WebDevCourseMaterial/GradeRecorderWebDev</a></li><li>We'll modify the app.yaml to use the correct app id and we'll make <b>login: required</b> for all pages</li><li>Eventually we'll have to modify <b>models.py</b>, <b>utils.py</b> (to practice queries), and <b>insert_handlers.py</b> (to write our Student, Assignment, and GradeEntry POST handlers).</li></ul>"
4,Designing Datastore Models,4,NDB Models,yes,Questions,https://docs.google.com/presentation/d/1S3a5xa0rl2-FlGtEB4hfY_H2UUA4_mmweGUCCpWGTT4/edit?usp=sharing,PQqMpVbG7s4,"<ul><li>Our three model objects will include the properties:</li><li style='margin-left: 30px;'><b>Student</b> - first_name, last_name, rose_username, and team</li><li style='margin-left: 30px;'><b>Assignment</b> - name</li><li style='margin-left: 30px;'><b>GradeEntry</b> - score, assignment_key (reference to the Assignment), student_key (reference to the Student)</li><li>The interesting things we'll do in this Datastore model design are based on ways we'll use keys (key parent/child relations and key names we'll use)</li><li>The code you'll add to use parent key relationships and set key names does not happen in models.py (i.e. it will not happen in this video)</li></ul>"
4,Designing Datastore Models,5,Query Practice,yes,Questions,https://docs.google.com/presentation/d/1S3a5xa0rl2-FlGtEB4hfY_H2UUA4_mmweGUCCpWGTT4/edit?usp=sharing,t0KrNCOLeUs,"<ul><li>I think the best way to learn about queries is to practice and THEN read references to cement your learning (and learn more)</li><li>So work the 7 challenges in the video then visit these two references:</li><li style='margin-left: 30px;'>Good reading about queries: <a target='_blank' href='https://developers.google.com/appengine/docs/python/ndb/queries'>https://developers.google.com/appengine/docs/python/ndb/queries</a></li><li style='margin-left: 30px;'>The <b>Query class</b> reference documentation: <a target='_blank' href='https://developers.google.com/appengine/docs/python/ndb/queryclass'>https://developers.google.com/appengine/docs/python/ndb/queryclass</a></li><li>A query consist of a Kind, ancestor, filters, and orders (all are technically optional, but Kind is pretty much always used)</li></ul>"
4,Designing Datastore Models,6,Add Students,yes,Questions,https://docs.google.com/presentation/d/1S3a5xa0rl2-FlGtEB4hfY_H2UUA4_mmweGUCCpWGTT4/edit?usp=sharing,Xq3xF_7kvwI,"<ul><li></li><li></li><li></li></ul>"
4,Designing Datastore Models,7,Insert Assignments,yes,Questions,https://docs.google.com/presentation/d/1S3a5xa0rl2-FlGtEB4hfY_H2UUA4_mmweGUCCpWGTT4/edit?usp=sharing,lesson_video_id,"<ul><li></li><li></li><li></li></ul>"
4,Designing Datastore Models,8,Add GradeEntries then Deploy,yes,Questions,https://docs.google.com/presentation/d/1S3a5xa0rl2-FlGtEB4hfY_H2UUA4_mmweGUCCpWGTT4/edit?usp=sharing,lesson_video_id,"<ul><li></li><li></li><li></li></ul>"
4,Designing Datastore Models,9,title,yes,Questions,https://docs.google.com/presentation/d/1S3a5xa0rl2-FlGtEB4hfY_H2UUA4_mmweGUCCpWGTT4/edit?usp=sharing,lesson_video_id,"<ul><li></li><li></li><li></li></ul>"
4,Designing Datastore Models,10,title,yes,Questions,https://docs.google.com/presentation/d/1S3a5xa0rl2-FlGtEB4hfY_H2UUA4_mmweGUCCpWGTT4/edit?usp=sharing,lesson_video_id,"<ul><li></li><li></li><li></li></ul>"
4,Designing Datastore Models,11,title,yes,Questions,https://docs.google.com/presentation/d/1S3a5xa0rl2-FlGtEB4hfY_H2UUA4_mmweGUCCpWGTT4/edit?usp=sharing,lesson_video_id,"<ul><li></li><li></li><li></li></ul>"

