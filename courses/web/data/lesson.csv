unit_id,unit_title,lesson_id,lesson_title,lesson_activity,lesson_activity_name,lesson_notes,lesson_video_id,lesson_objectives
1,Intro to AppEngine,1,AppEngine Overview,yes,Questions,https://docs.google.com/presentation/d/1SzS6vb0Hqm2s5Ct7PkKh15BY47x9MU4rTJ9spM7xjxM/edit?usp=sharing,z9NYt5v32Zs,"<ul><li>AppEngine is a tool for...</li><li style='margin-left: 30px'>Serving your web apps to the world</li><li style='margin-left: 30px'>Creating APIs for your iOS and Android apps to sync data with the Google Cloud Platform</li><li>Fair warning: When I say the word 'AppEngine' I really mean AppEngine + the Datastore + Endpoints.  It's shorter to simply say 'AppEngine' and mean all three.</li></ul>"
1,Intro to AppEngine,2,Install Test Lab,yes,Questions,https://docs.google.com/document/d/1lzetitdvee5NLJLwa4P88GincZQbNGJcy52RHe9Yc0E/edit?usp=sharing,Np8dMizzunQ,"<ul><li>Here is the <a target='_blank' href='https://docs.google.com/document/d/1lzetitdvee5NLJLwa4P88GincZQbNGJcy52RHe9Yc0E/edit?usp=sharing'>link to the Installation Lab</a></li><li>You will install Eclipse, Python 2.7, the Python Google AppEngine SDK, and the PyDev Eclipse plugin</li><li>After you install the tools you'll register an AppEngine app at <a target='_blank' href='http://console.developers.google.com'>http://console.developers.google.com</a></li><li>Then you'll prove your tools work by deploying a VERY simple AppEngine app</li></ul>"
2,First AppEngine Web App,1,Project Setup,yes,Questions,https://docs.google.com/presentation/d/1YcFsapYxhVS7CZxYOJiZf5l6-pA92fuHaEEUafaQv00/edit?usp=sharing,uLqxbg4tA_4,"<ul><li>First we'll register an AppEngine app at <a target='_blank' href='http://console.developers.google.com'>http://console.developers.google.com</a> called <b>yourusername</b>-movie-quotes</li><li>Then we'll use Google AppEngine Launcher to create a simple starting point template</li><li>Then create a project in Eclipse for that code</li><li>Finally we'll make a small modification and make sure we can deploy our app</li><li>This setup process could be used for starting any new AppEngine project.</li></ul>"
2,First AppEngine Web App,2,MovieQuote model,yes,Questions,https://docs.google.com/presentation/d/1YcFsapYxhVS7CZxYOJiZf5l6-pA92fuHaEEUafaQv00/edit?usp=sharing,xLtMGZRMRA4,"<ul><li>The first step towards storing entities into the Datastore, is creating a custom subclass of ndb.Model.</li><li>Our ndb.Model subclass will be called MovieQuote, which will be used to store our movie quotes.</li><li>A MovieQuote will have 2 ndb.StringProperty attributes (i.e. member variables) and one ndb.DateTimeProperty attribute</li><li>Instances of our MovieQuote class can be stored in Google's Cloud Datastore, saved forever (automatically backed up in 3 data centers), then retrieved later</li><li>The Datastore can be accessed from virtually any device that can access the web (iOS, Android, and device with a browser)</li></ul>"
2,First AppEngine Web App,3,Adding Jinja,yes,Questions,https://docs.google.com/presentation/d/1YcFsapYxhVS7CZxYOJiZf5l6-pA92fuHaEEUafaQv00/edit?usp=sharing,TnvnafO8WQA,"<ul><li>Jinja2 is a mechanism to let you create HTML pages in an .html file then insert values from the Datastore as needed</li><li>Conceptually Jinja is similar to using %d or %s with a formatted print String except you can do <b>way</b> more with Jinja templates</li><li>In later videos we'll do things like making for loops inside Jinja, you can also do if statements, call Python functions, use filters, etc</li><li>In this video we are <b>only</b> setting up Jinja with the bare basics.  We are not using any 'real' Jinja features yet, just preparing the way.</li></ul><script src='https://gist.github.com/fisherds/e657dfe0b2b9c51b0823.js'></script>"
2,First AppEngine Web App,4,Form POST,yes,Questions,https://docs.google.com/presentation/d/1YcFsapYxhVS7CZxYOJiZf5l6-pA92fuHaEEUafaQv00/edit?usp=sharing,CH3XaoNYN74,"<ul><li>The easiest way to send data to your backend is with <b>input</b> elements inside a <b>form</b> element</li><li>Forms are similar to links except they are typically used to do a POST request which send the values in the <b>input</b> elements</li><li>In addition to making the html you need to create a post handler that will process the request</li><li>The post handler will save the quote to the Datastore then redirect a user to do a get request to display the main page.</li></ul>"
2,First AppEngine Web App,5,Query to Display Quotes,yes,Questions,https://docs.google.com/presentation/d/1YcFsapYxhVS7CZxYOJiZf5l6-pA92fuHaEEUafaQv00/edit?usp=sharing,PPMrhUlAhyI,"<ul><li>In order to display MovieQuotes on the page we need to query the Datastore for saved quotes</li><li>Crating a MovieQuote.query() is basically instantaneous, but executing the query (via fetch or a for loop) to pull data from the Datastore is a slower, more expensive operation.</li><li>We'll order the results of the Datastore lookup by -MovieQuote.last_touch_date_time.  That puts our last_touch_date_time property in reverse order (newest first)</li><li>In order to see the latest quote added we need to block the query until the put() event completes.  The way to get this Strong Consistency feature is to make the MovieQuote entities children of a parent key and use that parent key for an Ancestor Query.</li><li>Our Strong Consistency solution might not scale to millions of users (blocking isn't always great), but it'll work just fine for our needs today. :)</li></ul>"
2,First AppEngine Web App,6,Adding static files,yes,Questions,https://docs.google.com/presentation/d/1YcFsapYxhVS7CZxYOJiZf5l6-pA92fuHaEEUafaQv00/edit?usp=sharing,-obbDeqMKrY,"<ul><li>Serving regular files (static files) is easy with AppEngine</li><li>Create a folder called 'static' and state within app.yaml that you'd like to serve that folder.  Any file within that folder is now served with your app (note, of course, that when you deploy later those files are available publically to the whole world).</li><li>We'll add a CSS file to our static folder, and link to that CSS file from our HTML</li><li>This lecture is not about learning CSS so we'll simply give you some CSS rules to copy into that file and an <a target='_blank' href='https://drive.google.com/file/d/0B-KIW0IjgQ5peHVEM1pUVko2czA/edit?usp=sharing'>image</a>.</li></ul><script src='https://gist.github.com/fisherds/221f90e9cfc2e9b7f08b.js'></script>"
2,First AppEngine Web App,7,Deploy,yes,Questions,https://docs.google.com/presentation/d/1YcFsapYxhVS7CZxYOJiZf5l6-pA92fuHaEEUafaQv00/edit?usp=sharing,q7xi7DrDmy4,"<ul><li>We'll deploy our finished MovieQuotes web app from Eclipse</li><li>Next we'll visit <a target='_blank' href='http://console.developers.google.com'>http://console.developers.google.com</a> and look at a few of the developers tools available.</li><li>The developer tools we'll use include: the Logs, the status of the Indexes, and the Datastore Viewer</li></ul>"
2,First AppEngine Web App,8,Weatherpics Lab,yes,Questions,https://docs.google.com/document/d/1fTPFhmvL3Epy8nRaN1f5uxzSmr6vS6vwyJ87ZgSZaoY/edit?usp=sharing,I4GCVXByba4,"<ul><li>Here is the link to the <a target='_blank' href='https://docs.google.com/document/d/1fTPFhmvL3Epy8nRaN1f5uxzSmr6vS6vwyJ87ZgSZaoY/edit?usp=sharing'>Weatherpic non-Bootstrap web app lab</a></li><li>You will be making an AppEngine web app from scratch that is similar in MANY ways to the MovieQuotes app</li><li>At the end of the lab you will <a target='_blank' href='https://docs.google.com/forms/d/1VL7euP4Wl_nWRivuDNjE37hXhfh4lKTw2kLjssO9gko/viewform'>submit your deployed Weatherpics URL</a></li></ul>"
3,Intro to using Bootstrap and jQuery with AppEngine Web Apps,1,Overview,yes,Questions,https://docs.google.com/presentation/d/1Ra91pkSpH1IolHI1AqmYjA37i5FD5DYV0ZVUllmZfGU/edit?usp=sharing,vq6oO1gZ76k,"<ul><li>In this unit we'll be adding <a target='_blank' href='http://getbootstrap.com'>Bootstrap</a> and <a target='_blank' href='http://jquery.com/'>jQuery</a></li><li>Bootstrap is primarily a CSS framework used to making reusable components (examples include menus, dialog boxes, grid layouts, and all kinds of pretty things).</li><li>Bootstrap started internally at Twitter, but became freely available and is now the #1 most popular Github repo</li><li>jQuery is a VERY popular JavaScript library that makes JavaScript easier to learn and work with.</li><li>If you look at the top websites in the world around 60% use jQuery (i.e. it is VERY popular)</li></ul>"
3,Intro to using Bootstrap and jQuery with AppEngine Web Apps,2,Removing prior HTML and CSS,yes,Questions,https://docs.google.com/document/d/1gx9D_OBds0fI2jeYMc8xZqEep5kAjDjOlJacdguyOB4/edit?usp=sharing,VW6kiSUDNqw,"<ul><li>We'll check to make sure our prior version of MovieQuotes still works, then save a copy of the old html and css</li><li>We'll pave the way for the Bootstrap version by deleting all of the css and the entire body of our existing html</li><li>We'll also learn a bit more about how to pretend to be a smartphone using Chrome Dev Tools to emulate mobile devices</li></ul>"

